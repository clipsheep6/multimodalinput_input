# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/multimodalinput/input/multimodalinput_mini.gni")
module_output_path = "multimodalinput/unit_out"

config("libmmi_client_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "event_handle/include",
    "module_loader/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/common/include",
    "//foundation/multimodalinput/input/common/include",
    "//foundation/multimodalinput/input/frameworks/util/common/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/proxy/include",
    "//foundation/multimodalinput/input/frameworks/util/common/include",
    "//foundation/multimodalinput/input/common/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "//utils/native/base/include",
    "//foundation/multimodalinput/input/service/input_interceptor/include",
    "//utils/native/base/include",
    "event_handler/include",
    "module_loader/include",
    "//foundation/multimodalinput/input/common/include",
    "//foundation/multimodalinput/input/frameworks/util/common/include",
  ]
}

config("libmmi_public_client_config") {
  include_dirs = [
    "//foundation/multimodalinput/input/interfaces/native/innerkits/common/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/proxy/include",
    "//foundation/multimodalinput/input/common/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "//utils/native/base/include",
  ]
}

ohos_source_set("libmmi-common") {
  sources = [
    "events/src/input_event.cpp",
    "events/src/key_event.cpp",
    "events/src/pointer_event.cpp",
  ]

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  configs = [ ":libmmi_client_config" ]

  public_configs = [ ":libmmi_client_config" ]

  deps = [ "//utils/native/base:utils" ]

  public_deps =
      [ "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog" ]

  part_name = "multimodalinput_base"
}

ohos_shared_library("libmmi-client") {
  sources = [
    "event_handler/src/client_msg_handler.cpp",
    "event_handler/src/input_device_impl.cpp",
    "event_handler/src/input_event_monitor_manager.cpp",
    "event_handler/src/input_handler_manager.cpp",
    "event_handler/src/input_interceptor_manager.cpp",
    "event_handler/src/input_manager_impl.cpp",
    "event_handler/src/input_monitor_manager.cpp",
    "event_handler/src/interceptor_manager.cpp",
    "event_handler/src/key_event_input_subscribe_manager.cpp",
    "event_handler/src/multimodal_event_handler.cpp",
    "event_handler/src/standardized_event_manager.cpp",
    "events/src/axis_event.cpp",
    "events/src/input_manager.cpp",
    "events/src/key_option.cpp",
    "module_loader/src/mmi_client.cpp",
  ]

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  configs = [
    ":libmmi_client_config",
    "//foundation/multimodalinput/input/frameworks/util:libmmi_util_public_config",
    "//foundation/multimodalinput/input/service/filter:mmi_event_filter_config",
    "//foundation/multimodalinput/input/service/connect_manager:mmi_connect_manager_config",
  ]

  public_configs = [ ":libmmi_public_client_config" ]

  public_deps = [ "//utils/native/base:utils" ]

  deps = [
    ":libmmi-common",
    "//drivers/peripheral/input/hal:hdi_input",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/multimodalinput/input/frameworks/util:libmmi-util",
    "//foundation/multimodalinput/input/service/connect_manager:mmi_connect_manager_proxy",
    "//foundation/multimodalinput/input/service/filter:mmi_event_filter_service",
  ]

  part_name = "multimodalinput_base"
  external_deps = [ "bytrace_standard:bytrace_core" ]
}

ohos_unittest("ut-mmi-proxy-out") {
  module_out_path = module_output_path
  include_dirs = [
    "//utils/native/base/include",
    "//third_party/googletest/googletest/include",
    "//utils/native/base/include",
    "${mmi_path}/common/include",
    "${mmi_path}/frameworks/proxy/event_handler",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/frameworks/util/common",
    "${mmi_path}/frameworks/util/common/include",
    "${mmi_path}/frameworks/util/network",
    "${mmi_path}/frameworks/util/network/include",
    "${mmi_path}/frameworks/util/socket",
    "${mmi_path}/frameworks/util/socket/include",
    "${mmi_path}/frameworks/proxy/event_handle",
    "${mmi_path}/frameworks/proxy/event_handle/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/common/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
  ]

  if (is_mmi_have_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  if (is_mmi_have_hdf) {
    cflags += [ "-DOHOS_BUILD_HDF" ]
  }

  sources = [ "module_loader/test/mmi_client_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/frameworks/util:libmmi-util",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
}

ohos_unittest("KeyEventTest") {
  module_out_path = module_output_path
  include_dirs = [
    "//utils/native/base/include",
    "//third_party/googletest/googletest/include",
    "//utils/native/base/include",
    "${mmi_path}/common/include",
    "${mmi_path}/frameworks/proxy/event_handler",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/frameworks/util/common",
    "${mmi_path}/frameworks/util/common/include",
    "${mmi_path}/frameworks/util/network",
    "${mmi_path}/frameworks/util/network/include",
    "${mmi_path}/frameworks/util/socket",
    "${mmi_path}/frameworks/util/socket/include",
    "${mmi_path}/frameworks/proxy/event_handle",
    "${mmi_path}/frameworks/proxy/event_handle/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/common/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
  ]

  if (is_mmi_have_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  if (is_mmi_have_hdf) {
    cflags += [ "-DOHOS_BUILD_HDF" ]
  }

  sources = [ "events/test/key_event_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/frameworks/util:libmmi-util",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
}

ohos_unittest("InputManagerTest") {
  module_out_path = module_output_path
  include_dirs = [
    "//utils/native/base/include",
    "//third_party/googletest/googletest/include",
    "//utils/native/base/include",
    "${mmi_path}/common/include",
    "${mmi_path}/frameworks/proxy/event_handler",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/frameworks/util/common",
    "${mmi_path}/frameworks/util/common/include",
    "${mmi_path}/frameworks/util/network",
    "${mmi_path}/frameworks/util/network/include",
    "${mmi_path}/frameworks/util/socket",
    "${mmi_path}/frameworks/util/socket/include",
    "${mmi_path}/frameworks/proxy/event_handle",
    "${mmi_path}/frameworks/proxy/event_handle/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/common/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
  ]

  if (is_mmi_have_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  if (is_mmi_have_hdf) {
    cflags += [ "-DOHOS_BUILD_HDF" ]
  }

  sources = [ "events/test/input_manager_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/frameworks/util:libmmi-util",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
}

ohos_unittest("InputManagerManualTest") {
  module_out_path = module_output_path
  include_dirs = [
    "//utils/native/base/include",
    "//third_party/googletest/googletest/include",
    "//utils/native/base/include",
    "${mmi_path}/common/include",
    "${mmi_path}/frameworks/proxy/event_handler",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/frameworks/util/common",
    "${mmi_path}/frameworks/util/common/include",
    "${mmi_path}/frameworks/util/network",
    "${mmi_path}/frameworks/util/network/include",
    "${mmi_path}/frameworks/util/socket",
    "${mmi_path}/frameworks/util/socket/include",
    "${mmi_path}/frameworks/proxy/event_handle",
    "${mmi_path}/frameworks/proxy/event_handle/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/common/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
  ]

  if (is_mmi_have_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  if (is_mmi_have_hdf) {
    cflags += [ "-DOHOS_BUILD_HDF" ]
  }

  sources = [ "events/test/input_manager_manual_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/frameworks/util:libmmi-util",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
}

ohos_unittest("PointerEventTest") {
  module_out_path = module_output_path
  include_dirs = [
    "//utils/native/base/include",
    "//third_party/googletest/googletest/include",
    "//utils/native/base/include",
    "${mmi_path}/common/include",
    "${mmi_path}/frameworks/proxy/event_handler",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/frameworks/util/common",
    "${mmi_path}/frameworks/util/common/include",
    "${mmi_path}/frameworks/util/network",
    "${mmi_path}/frameworks/util/network/include",
    "${mmi_path}/frameworks/util/socket",
    "${mmi_path}/frameworks/util/socket/include",
    "${mmi_path}/frameworks/proxy/event_handle",
    "${mmi_path}/frameworks/proxy/event_handle/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/common/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
  ]

  if (is_mmi_have_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  if (is_mmi_have_hdf) {
    cflags += [ "-DOHOS_BUILD_HDF" ]
  }

  sources = [ "events/test/pointer_event_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/frameworks/util:libmmi-util",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
}

group("ut-mmi-proxy") {
  testonly = true
  deps = [
    ":InputManagerTest",
    ":KeyEventTest",
    ":PointerEventTest",
    ":ut-mmi-proxy-out",
  ]
}
