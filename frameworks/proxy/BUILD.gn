# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/multimodalinput/input/multimodalinput_mini.gni")
module_output_path = "multimodalinput/unit_out"

config("libmmi_client_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "//foundation/multimodalinput/input/interfaces/native/innerkits/common/include",
    "//foundation/multimodalinput/input/util/common/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event/include",
    "event_handler/include",
    "events/include",
    "module_loader/include",
  ]
}

config("libmmi_public_client_config") {
  include_dirs = [
    "//base/notification/eventhandler/interfaces/inner_api",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/common/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/proxy/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "//foundation/multimodalinput/input/util/common/include",
  ]
}

config("libmmi_test_util") {
  include_dirs = [
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/test/unittest/common/include",
    "${mmi_path}/util/network/include",
    "${mmi_path}/util/socket/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "//foundation/window/window_manager/wm/include",
    "//third_party/googletest/googletest/include",
  ]
}

ohos_source_set("libmmi-common") {
  sources = [
    "events/src/input_device.cpp",
    "events/src/input_event.cpp",
    "events/src/key_event.cpp",
    "events/src/key_option.cpp",
    "events/src/pointer_event.cpp",
  ]

  defines = []

  if (input_feature_debug) {
    defines += [ "OHOS_BUILD_MMI_DEBUG" ]
  }

  if (input_feature_input_cooperation) {
    defines += [ "OHOS_BUILD_ENABLE_COOPERATE" ]
  }
  public_configs = [ ":libmmi_client_config" ]

  external_deps = [
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
  ]

  part_name = "input"
}

ohos_shared_library("libmmi-client") {
  sources = [
    "event_handler/src/bytrace_adapter.cpp",
    "event_handler/src/client_msg_handler.cpp",
    "event_handler/src/input_device_impl.cpp",
    "event_handler/src/input_handler_manager.cpp",
    "event_handler/src/input_manager_impl.cpp",
    "event_handler/src/multimodal_event_handler.cpp",
    "event_handler/src/standardized_event_manager.cpp",
    "events/src/axis_event.cpp",
    "events/src/input_manager.cpp",
    "module_loader/src/mmi_client.cpp",
    "module_loader/src/mmi_event_handler.cpp",
    "module_loader/src/mmi_fd_listener.cpp",
  ]
  if (input_feature_input_cooperation) {
    sources += [ "event_handler/src/input_device_cooperate_impl.cpp" ]
  }

  defines = []

  if (input_feature_debug) {
    defines += [ "OHOS_BUILD_MMI_DEBUG" ]
  }

  if (input_feature_pointer_drawing) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER_DRAWING" ]
  }
  if (input_feature_monitor) {
    defines += [ "OHOS_BUILD_ENABLE_MONITOR" ]
  }
  if (input_feature_interceptor) {
    defines += [ "OHOS_BUILD_ENABLE_INTERCEPTOR" ]
  }
  if (input_feature_keyboard) {
    defines += [ "OHOS_BUILD_ENABLE_KEYBOARD" ]
  }
  if (input_feature_mouse) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER" ]
  }
  if (input_feature_touchscreen) {
    defines += [ "OHOS_BUILD_ENABLE_TOUCH" ]
  }

  if (input_feature_interceptor) {
    sources += [ "event_handler/src/input_interceptor_manager.cpp" ]
  }

  if (input_feature_monitor) {
    sources += [ "event_handler/src/input_monitor_manager.cpp" ]
  }

  if (input_feature_keyboard) {
    sources += [ "event_handler/src/key_event_input_subscribe_manager.cpp" ]
  }

  if (input_feature_input_cooperation) {
    defines += [ "OHOS_BUILD_ENABLE_COOPERATE" ]
  }

  configs = [
    ":libmmi_client_config",
    "//foundation/multimodalinput/input/util:libmmi_util_public_config",
    "//foundation/multimodalinput/input/service/filter:mmi_event_filter_config",
    "//foundation/multimodalinput/input/service/connect_manager:mmi_connect_manager_config",
  ]

  public_configs = [ ":libmmi_public_client_config" ]

  deps = [
    ":libmmi-common",
    "//foundation/multimodalinput/input/service/connect_manager:mmi_connect_manager_proxy",
    "//foundation/multimodalinput/input/service/filter:mmi_event_filter_service",
    "//foundation/multimodalinput/input/util:libmmi-util",
  ]

  part_name = "input"
  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("ut-mmi-proxy-out") {
  module_out_path = module_output_path
  include_dirs = [ "//commonlibrary/c_utils/base/include" ]

  if (input_feature_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  defines = []

  if (input_feature_debug) {
    defines += [ "OHOS_BUILD_MMI_DEBUG" ]
  }

  if (input_feature_libinput) {
    defines += [ "OHOS_BUILD_LIBINPUT" ]
  }

  if (input_feature_hdf) {
    defines += [ "OHOS_BUILD_HDF" ]
  }

  sources = [ "module_loader/test/mmi_client_test.cpp" ]

  configs = [ ":libmmi_test_util" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("KeyEventTest") {
  module_out_path = module_output_path
  include_dirs = [ "//commonlibrary/c_utils/base/include" ]

  if (input_feature_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  defines = []

  if (input_feature_debug) {
    defines += [ "OHOS_BUILD_MMI_DEBUG" ]
  }

  if (input_feature_libinput) {
    defines += [ "OHOS_BUILD_LIBINPUT" ]
  }

  if (input_feature_hdf) {
    defines += [ "OHOS_BUILD_HDF" ]
  }

  sources = [ "events/test/key_event_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("InputManagerTest") {
  module_out_path = module_output_path
  include_dirs = [ "${mmi_path}/frameworks/proxy/events/test" ]

  if (input_feature_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  defines = []

  if (input_feature_debug) {
    defines += [ "OHOS_BUILD_MMI_DEBUG" ]
  }

  if (input_feature_pointer_drawing) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER_DRAWING" ]
  }

  if (input_feature_libinput) {
    defines += [ "OHOS_BUILD_LIBINPUT" ]
  }

  if (input_feature_hdf) {
    defines += [ "OHOS_BUILD_HDF" ]
  }

  if (input_feature_keyboard) {
    defines += [ "OHOS_BUILD_ENABLE_KEYBOARD" ]
  }
  if (input_feature_mouse) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER" ]
  }
  if (input_feature_touchscreen) {
    defines += [ "OHOS_BUILD_ENABLE_TOUCH" ]
  }
  if (input_feature_interceptor) {
    defines += [ "OHOS_BUILD_ENABLE_INTERCEPTOR" ]
  }
  if (input_feature_monitor) {
    defines += [ "OHOS_BUILD_ENABLE_MONITOR" ]
  }
  sources = [
    "${mmi_path}/test/unittest/common/src/event_util_test.cpp",
    "${mmi_path}/test/unittest/common/src/system_info.cpp",
    "${mmi_path}/test/unittest/common/src/window_utils_test.cpp",
    "events/test/input_manager_test.cpp",
  ]

  configs = [ ":libmmi_test_util" ]

  deps = [
    "${ability_runtime_path}/frameworks/native/ability/native:abilitykit_native",
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "window_manager:libwm",
  ]
}

ohos_unittest("InputManagerManualTest") {
  module_out_path = module_output_path
  include_dirs = [ "//commonlibrary/c_utils/base/include" ]

  if (input_feature_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  defines = []

  if (input_feature_debug) {
    defines += [ "OHOS_BUILD_MMI_DEBUG" ]
  }

  if (input_feature_libinput) {
    defines += [ "OHOS_BUILD_LIBINPUT" ]
  }

  if (input_feature_hdf) {
    defines += [ "OHOS_BUILD_HDF" ]
  }

  if (input_feature_mouse) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER" ]
  }
  if (input_feature_touchscreen) {
    defines += [ "OHOS_BUILD_ENABLE_TOUCH" ]
  }
  sources = [ "events/test/input_manager_manual_test.cpp" ]

  configs = [ ":libmmi_test_util" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("PointerEventTest") {
  module_out_path = module_output_path

  if (input_feature_libinput) {
    include_dirs = [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  defines = []

  if (input_feature_debug) {
    defines += [ "OHOS_BUILD_MMI_DEBUG" ]
  }

  if (input_feature_libinput) {
    defines += [ "OHOS_BUILD_LIBINPUT" ]
  }

  if (input_feature_hdf) {
    defines += [ "OHOS_BUILD_HDF" ]
  }

  if (input_feature_mouse) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER" ]
  }
  sources = [
    "${mmi_path}/test/unittest/common/src/event_util_test.cpp",
    "${mmi_path}/test/unittest/common/src/window_utils_test.cpp",
    "events/test/pointer_event_test.cpp",
  ]

  configs = [ ":libmmi_test_util" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/util:libmmi-util",
    "//foundation/ability/ability_runtime/frameworks/native/ability/native:abilitykit_native",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "window_manager:libwm",
  ]
}
if (input_feature_input_cooperation) {
  ohos_unittest("InputCooperateTest") {
    module_out_path = module_output_path
    if (input_feature_libinput) {
      include_dirs = [
        "$root_out_dir/diff_libinput_mmi/export_include",
        "${mmi_path}/interfaces/native/innerkits/common/include",
        "${mmi_path}/frameworks/proxy/events/test",
        "${mmi_path}/service/filter/include",
        "${mmi_path}/service/connect_manager/include",
        "${mmi_path}/frameworks/proxy/event_handler/include",
        "//foundation/systemabilitymgr/safwk/services/safwk/include",
        "${mmi_path}/frameworks/proxy/events/test/mock",
        "//usr/include/x86_64-linux-gnu/bits",
      ]
    }

    defines = []

    if (input_feature_input_cooperation) {
      defines += [ "OHOS_BUILD_ENABLE_COOPERATE" ]
    }

    if (input_feature_debug) {
      defines += [ "OHOS_BUILD_MMI_DEBUG" ]
    }

    if (input_feature_libinput) {
      defines += [ "OHOS_BUILD_LIBINPUT" ]
    }

    if (input_feature_hdf) {
      defines += [ "OHOS_BUILD_HDF" ]
    }

    if (input_feature_mouse) {
      defines += [ "OHOS_BUILD_ENABLE_POINTER" ]
    }
    sources = [
      "event_handler/src/input_device_cooperate_impl.cpp",
      "event_handler/src/input_manager_impl.cpp",
      "events/src/input_manager.cpp",
      "events/test/input_cooperate_test.cpp",
      "events/test/mock/mock_multimodal_input_connect_proxy.cpp",
    ]

    configs = [ ":libmmi_test_util" ]

    deps = [
      "${mmi_path}/frameworks/proxy:libmmi-client",
      "${mmi_path}/util:libmmi-util",
      "//foundation/ability/ability_runtime/frameworks/native/ability/native:abilitykit_native",
      "//third_party/googletest:gmock_main",
      "//third_party/googletest:gtest_main",
    ]
    external_deps = [
      "access_token:libaccesstoken_sdk",
      "access_token:libnativetoken",
      "access_token:libtoken_setproc",
      "hiviewdfx_hilog_native:libhilog",
      "ipc:ipc_core",
      "window_manager:libwm",
    ]
  }
}

if (input_feature_input_cooperation) {
  ohos_unittest("AnomalousInputCooperateTest") {
    module_out_path = module_output_path
    if (input_feature_libinput) {
      include_dirs = [
        "$root_out_dir/diff_libinput_mmi/export_include",
        "${mmi_path}/interfaces/native/innerkits/common/include",
        "${mmi_path}/frameworks/proxy/events/test",
        "${mmi_path}/service/filter/include",
        "${mmi_path}/service/connect_manager/include",
        "${mmi_path}/frameworks/proxy/event_handler/include",
        "//foundation/systemabilitymgr/safwk/services/safwk/include",

        "//foundation/multimodalinput/input/service/event_handler/include",
        "//foundation/multimodalinput/input/service/libinput_adapter/include",
        "//third_party/libinput/src",
        "//third_party/eudev/src/libudev",
        "//third_party/json/include",
        "//foundation/multimodalinput/input/util/network/include",
        "//foundation/multimodalinput/input/service/module_loader/include",
        "//foundation/multimodalinput/input/service/connect_manager/include",
        "//foundation/distributedhardware/distributed_input/frameworks/include",
        "//foundation/distributedhardware/device_manager/interfaces/inner_kits/native_cpp/include",
        "//foundation/distributedhardware/distributed_input/common/include",
        "//foundation/multimodalinput/input/service/device_manager/include",
        "//base/hiviewdfx/hitrace/interfaces/native/innerkits/include/hitrace_meter",
        "//foundation/distributedschedule/safwk/services/safwk/include",
        "//foundation/multimodalinput/input/service/event_dispatch/include",
        "//foundation/multimodalinput/input/service/mouse_event_handler/include",
        "//foundation/multimodalinput/input/service/timer_manager/include",
        "//foundation/multimodalinput/input/service/filter/include",
        "//foundation/multimodalinput/input/service/input_device_cooperate/include",
        "//foundation/multimodalinput/input/service/input_device_cooperate/test/mock",
        "//foundation/distributedhardware/distributed_input/interfaces/inner_kits/include",
        "//foundation/distributedhardware/distributed_hardware_fwk/common/log/include",
        "//foundation/multimodalinput/input/service/event_package/include",
        "//foundation/multimodalinput/input/util/socket/include",
        "//foundation/multimodalinput/input/service/window_manager/include",
        "//foundation/distributedhardware/distributed_hardware_fwk/utils/include/log",
        "//foundation/communication/dsoftbus/interfaces/kits/common",
        "//foundation/distributedhardware/distributed_input/interfaces/ipc/include",
        "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
        "//foundation/distributedhardware/distributed_hardware_fwk/common/utils/include",
        "//foundation/communication/bluetooth/frameworks/inner/common",
        "//foundation/deviceprofile/device_info_manager/interfaces/innerkits/core/include",
        "//foundation/multimodalinput/input/service/key_event_handler/include",
        "//foundation/systemabilitymgr/samgr/interfaces/innerkits/samgr_proxy/include",
        "//foundation/multimodalinput/input/service/interceptor/include",
        "//foundation/multimodalinput/input/service/monitor/include",
        "//foundation/multimodalinput/input/service/subscriber/include",
        "//foundation/multimodalinput/input/service/mouse_event_normalize/include",
        "//third_party/cJSON",
        "//foundation/multimodalinput/input/service/key_event_normalize/include",
        "//foundation/communication/dsoftbus/sdk/transmission/session/include",
        "//foundation/communication/dsoftbus/core/common/include",
        "//foundation/distributeddatamgr/kv_store/kvstoremock/interfaces/mock/base",
        "//foundation/multimodalinput/input/interfaces/native/innerkits/event/include",
        "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
        "//foundation/multimodalinput/input/interfaces/native/innerkits/proxy/include",
      ]
    }

    defines = []

    if (input_feature_input_cooperation) {
      defines += [ "OHOS_BUILD_ENABLE_COOPERATE" ]
    }

    if (input_feature_debug) {
      defines += [ "OHOS_BUILD_MMI_DEBUG" ]
    }

    if (input_feature_libinput) {
      defines += [ "OHOS_BUILD_LIBINPUT" ]
    }

    if (input_feature_hdf) {
      defines += [ "OHOS_BUILD_HDF" ]
    }

    if (input_feature_mouse) {
      defines += [ "OHOS_BUILD_ENABLE_POINTER" ]
    }
    sources = [
      "event_handler/src/input_device_cooperate_impl.cpp",
      "event_handler/src/input_manager_impl.cpp",
      "events/src/input_manager.cpp",
      "events/test/anomalous_input_cooperate_test.cpp",
    ]

    configs = [ ":libmmi_test_util" ]

    deps = [
      "${mmi_path}/frameworks/proxy:libmmi-client",
      "${mmi_path}/util:libmmi-util",
      "//foundation/ability/ability_runtime/frameworks/native/ability/native:abilitykit_native",
      "//third_party/googletest:gmock_main",
      "//third_party/googletest:gtest_main",
    ]
    external_deps = [
      "access_token:libaccesstoken_sdk",
      "access_token:libnativetoken",
      "access_token:libtoken_setproc",
      "hiviewdfx_hilog_native:libhilog",
      "ipc:ipc_core",
      "window_manager:libwm",
    ]
  }
}
