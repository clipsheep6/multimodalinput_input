diff a/interfaces/native/innerkits/proxy/include/window_info.h b/interfaces/native/innerkits/proxy/include/window_info.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -23,28 +23,28 @@ namespace OHOS {
 namespace MMI {
 inline constexpr int32_t GLOBAL_WINDOW_ID = -1;
 enum Direction {
-    /**
+    /* *
      * Rotating the display clockwise by 0 degree
      *
      * @since 9
      */
     DIRECTION0,
 
-    /**
+    /* *
      * Rotating the display clockwise by 90 degrees
      *
      * @since 9
      */
     DIRECTION90,
 
-    /**
+    /* *
      * Rotating the display clockwise by 180 degrees
      *
      * @since 9
      */
     DIRECTION180,
 
-    /**
+    /* *
      * Rotating the display clockwise by 270 degrees
      *
      * @since 9
@@ -53,28 +53,28 @@ enum Direction {
 };
 
 struct Rect {
-    /**
+    /* *
      * X coordinate of the upper left corner
      *
      * @since 9
      */
     int32_t x;
 
-    /**
+    /* *
      * Y coordinate of the upper left corner
      *
      * @since 9
      */
     int32_t y;
 
-    /**
+    /* *
      * Width
      *
      * @since 9
      */
     int32_t width;
 
-    /**
+    /* *
      * Height
      *
      * @since 9
@@ -84,49 +84,49 @@ struct Rect {
 
 
 struct WindowInfo {
-    /**
+    /* *
      * Maximum number of hot areas
      *
      * @since 9
      */
     static constexpr int32_t MAX_HOTAREA_COUNT = 10;
 
-    /**
+    /* *
      * Untouchable window
      *
      * @since 9
      */
     static constexpr uint32_t FLAG_BIT_UNTOUCHABLE = 1;
 
-    /**
+    /* *
      * Globally unique identifier of the window
      *
      * @since 9
      */
     int32_t id;
 
-    /**
+    /* *
      * ID of the process where the window is located
      *
      * @since 9
      */
     int32_t pid;
 
-    /**
+    /* *
      * UID of the process where the window is located
      *
      * @since 9
      */
     int32_t uid;
 
-    /**
+    /* *
      * Window display area
      *
      * @since 9
      */
     Rect area;
 
-    /**
+    /* *
      * Number of touch response areas (excluding the mouse response areas) in the window.
      * The value cannot exceed the value of MAX_HOTAREA_COUNT.
      *
@@ -134,21 +134,21 @@ struct WindowInfo {
      */
     std::vector<Rect> defaultHotAreas;
 
-    /**
+    /* *
      * Number of mouse response areas in the window. The value cannot exceed the value of MAX_HOTAREA_COUNT.
      *
      * @since 9
      */
     std::vector<Rect> pointerHotAreas;
 
-    /**
+    /* *
      * Agent window ID
      *
      * @since 9
      */
     int32_t agentWindowId;
 
-    /**
+    /* *
      * A 32-bit flag that represents the window status. If the 0th bit is 1,
      * the window is untouchable; if the 0th bit is 0, the window is touchable.
      *
@@ -163,28 +163,28 @@ struct WindowInfo {
  * @since 9
  */
 struct DisplayInfo {
-    /**
+    /* *
      * Unique ID of the physical display
      *
      * @since 9
      */
     int32_t id;
 
-    /**
+    /* *
      * X coordinate of the upper left corner on the logical screen
      *
      * @since 9
      */
     int32_t x;
 
-    /**
+    /* *
      * Y coordinate of the upper left corner on the logical screen
      *
      * @since 9
      */
     int32_t y;
 
-    /**
+    /* *
      * Display width, which is the logical width of the original screen when the rotation angle is 0.
      * The value remains unchanged even if the display screen is rotated.
      *
@@ -192,7 +192,7 @@ struct DisplayInfo {
      */
     int32_t width;
 
-    /**
+    /* *
      * Display height, which is the logical height of the original screen when the rotation angle is 0.
      * The value remains unchanged even if the display screen is rotated.
      *
@@ -200,28 +200,28 @@ struct DisplayInfo {
      */
     int32_t height;
 
-    /**
+    /* *
      * Pixel density, which indicates the number of pixels in an inch
      *
      * @since 10
      */
     int32_t dpi;
 
-    /**
+    /* *
      * Name of the physical display, which is used for debugging
      *
      * @since 9
      */
     std::string name;
 
-    /**
+    /* *
      * Unique screen ID, which is used to associate the corresponding touchscreen. The default value is default0.
      *
      * @since 9
      */
     std::string uniq;
 
-    /**
+    /* *
      * Orientation of the physical display
      *
      * @since 9
@@ -235,35 +235,35 @@ struct DisplayInfo {
  * @since 9
  */
 struct DisplayGroupInfo {
-    /**
+    /* *
      * Width of the logical display
      *
      * @since 9
      */
     int32_t width;
 
-    /**
+    /* *
      * Height of the logical display
      *
      * @since 9
      */
     int32_t height;
 
-    /**
+    /* *
      * ID of the focus window
      *
      * @since 9
      */
     int32_t focusWindowId;
 
-    /**
+    /* *
      * List of window information of the logical display arranged in Z order, with the top window at the top
      *
      * @since 9
      */
     std::vector<WindowInfo> windowsInfo;
 
-    /**
+    /* *
      * Physical screen information list
      *
      * @since 9
@@ -271,8 +271,7 @@ struct DisplayGroupInfo {
     std::vector<DisplayInfo> displaysInfo;
 };
 
-struct DisplayBindInfo
-{
+struct DisplayBindInfo {
     int32_t inputDeviceId = -1;
     std::string inputDeviceName;
     int32_t displayId = -1;
