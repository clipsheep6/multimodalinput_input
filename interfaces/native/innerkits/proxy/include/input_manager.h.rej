diff a/interfaces/native/innerkits/proxy/include/input_manager.h b/interfaces/native/innerkits/proxy/include/input_manager.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -38,7 +38,7 @@ namespace OHOS {
 namespace MMI {
 class InputManager {
 public:
-    /**
+    /* *
      * @brief Obtains an <b>InputManager</b> instance.
      * @return Returns the pointer to the <b>InputManager</b> instance.
      * @since 9
@@ -49,7 +49,7 @@ public:
     int32_t GetDisplayBindInfo(DisplayBindInfos &infos);
     int32_t SetDisplayBind(int32_t deviceId, int32_t displayId, std::string &msg);
 
-    /**
+    /* *
      * @brief Updates the screen and window information.
      * @param displayGroupInfo Indicates the logical screen information.
      * @since 9
@@ -59,7 +59,7 @@ public:
     int32_t AddInputEventFilter(std::shared_ptr<IInputEventFilter> filter, int32_t priority, uint32_t deviceTags);
     int32_t RemoveInputEventFilter(int32_t filterId);
 
-    /**
+    /* *
      * @brief Sets a consumer for the window input event of the current process.
      * @param inputEventConsumer Indicates the consumer to set. The window input event of the current process
      * will be called back to the consumer object for processing.
@@ -67,7 +67,7 @@ public:
      */
     void SetWindowInputEventConsumer(std::shared_ptr<IInputEventConsumer> inputEventConsumer);
 
-    /**
+    /* *
      * @brief Sets a window input event consumer that runs on the specified thread.
      * @param inputEventConsumer Indicates the consumer to set.
      * @param eventHandler Indicates the thread running the consumer.
@@ -76,7 +76,7 @@ public:
     void SetWindowInputEventConsumer(std::shared_ptr<IInputEventConsumer> inputEventConsumer,
         std::shared_ptr<AppExecFwk::EventHandler> eventHandler);
 
-    /**
+    /* *
      * @brief Subscribes to the key input event that meets a specific condition. When such an event occurs,
      * the <b>callback</b> specified is invoked to process the event.
      * @param keyOption Indicates the condition of the key input event.
@@ -89,7 +89,7 @@ public:
     int32_t SubscribeKeyEvent(std::shared_ptr<KeyOption> keyOption,
         std::function<void(std::shared_ptr<KeyEvent>)> callback);
 
-    /**
+    /* *
      * @brief Unsubscribes from a key input event.
      * @param subscriberId Indicates the subscription ID, which is the return value of <b>SubscribeKeyEvent</b>.
      * @return void
@@ -97,7 +97,7 @@ public:
      */
     void UnsubscribeKeyEvent(int32_t subscriberId);
 
-    /**
+    /* *
      * @brief Subscribes to the switch input event that meets a specific condition. When such an event occurs,
      * the <b>callback</b> specified is invoked to process the event.
      * @param callback Indicates the callback.
@@ -108,7 +108,7 @@ public:
      */
     int32_t SubscribeSwitchEvent(std::function<void(std::shared_ptr<SwitchEvent>)> callback);
 
-    /**
+    /* *
      * @brief Unsubscribes from a switch input event.
      * @param subscriberId Indicates the subscription ID, which is the return value of <b>SubscribeKeyEvent</b>.
      * @return void
@@ -116,7 +116,7 @@ public:
      */
     void UnsubscribeSwitchEvent(int32_t subscriberId);
 
-    /**
+    /* *
      * @brief Adds an input event monitor. After such a monitor is added,
      * an input event is copied and distributed to the monitor while being distributed to the original target.
      * @param monitor Indicates the input event monitor. After an input event is generated,
@@ -128,7 +128,7 @@ public:
      */
     int32_t AddMonitor(std::function<void(std::shared_ptr<KeyEvent>)> monitor);
 
-    /**
+    /* *
      * @brief Adds an input event monitor. After such a monitor is added,
      * an input event is copied and distributed to the monitor while being distributed to the original target.
      * @param monitor Indicates the input event monitor. After an input event is generated,
@@ -140,7 +140,7 @@ public:
      */
     int32_t AddMonitor(std::function<void(std::shared_ptr<PointerEvent>)> monitor);
 
-    /**
+    /* *
      * @brief Adds an input event monitor. After such a monitor is added,
      * an input event is copied and distributed to the monitor while being distributed to the original target.
      * @param monitor Indicates the input event monitor. After an input event is generated,
@@ -152,7 +152,7 @@ public:
      */
     int32_t AddMonitor(std::shared_ptr<IInputEventConsumer> monitor);
 
-    /**
+    /* *
      * @brief Removes a monitor.
      * @param monitorId Indicates the monitor ID, which is the return value of <b>AddMonitor</b>.
      * @return void
@@ -160,7 +160,7 @@ public:
      */
     void RemoveMonitor(int32_t monitorId);
 
-    /**
+    /* *
      * @brief Marks that a monitor has consumed a touchscreen input event. After being consumed,
      * the touchscreen input event will not be distributed to the original target.
      * @param monitorId Indicates the monitor ID.
@@ -170,7 +170,7 @@ public:
      */
     void MarkConsumed(int32_t monitorId, int32_t eventId);
 
-    /**
+    /* *
      * @brief Moves the cursor to the specified position.
      * @param offsetX Indicates the offset on the X axis.
      * @param offsetY Indicates the offset on the Y axis.
@@ -179,7 +179,7 @@ public:
      */
     void MoveMouse(int32_t offsetX, int32_t offsetY);
 
-    /**
+    /* *
      * @brief Adds an input event interceptor. After such an interceptor is added,
      * an input event will be distributed to the interceptor instead of the original target and monitor.
      * @param interceptor Indicates the input event interceptor. After an input event is generated,
@@ -193,7 +193,7 @@ public:
     int32_t AddInterceptor(std::function<void(std::shared_ptr<KeyEvent>)> interceptor);
     int32_t AddInterceptor(std::shared_ptr<IInputEventConsumer> interceptor, int32_t priority, uint32_t deviceTags);
 
-    /**
+    /* *
      * @brief Removes an interceptor.
      * @param interceptorId Indicates the interceptor ID, which is the return value of <b>AddInterceptor</b>.
      * @return void
@@ -201,7 +201,7 @@ public:
      */
     void RemoveInterceptor(int32_t interceptorId);
 
-    /**
+    /* *
      * @brief Simulates a key input event. This event will be distributed and
      * processed in the same way as the event reported by the input device.
      * @param keyEvent Indicates the key input event to simulate.
@@ -210,7 +210,7 @@ public:
      */
     void SimulateInputEvent(std::shared_ptr<KeyEvent> keyEvent);
 
-    /**
+    /* *
      * @brief Simulates a touchpad input event, touchscreen input event, or mouse device input event.
      * This event will be distributed and processed in the same way as the event reported by the input device.
      * @param pointerEvent Indicates the touchpad input event, touchscreen input event,
@@ -220,7 +220,7 @@ public:
      */
     void SimulateInputEvent(std::shared_ptr<PointerEvent> pointerEvent);
 
-    /**
+    /* *
      * @brief Starts listening for an input device event.
      * @param type Indicates the type of the input device event, which is <b>change</b>.
      * @param listener Indicates the listener for the input device event.
@@ -229,7 +229,7 @@ public:
      */
     int32_t RegisterDevListener(std::string type, std::shared_ptr<IInputDeviceListener> listener);
 
-    /**
+    /* *
      * @brief Stops listening for an input device event.
      * @param type Indicates the type of the input device event, which is <b>change</b>.
      * @param listener Indicates the listener for the input device event.
@@ -238,15 +238,15 @@ public:
      */
     int32_t UnregisterDevListener(std::string type, std::shared_ptr<IInputDeviceListener> listener = nullptr);
 
-    /**
+    /* *
      * @brief Obtains the information about an input device.
      * @param callback Indicates the callback used to receive the reported data.
      * @return Returns <b>0</b> if success; returns a non-0 value otherwise.
      * @since 9
      */
-    int32_t GetDeviceIds(std::function<void(std::vector<int32_t>&)> callback);
+    int32_t GetDeviceIds(std::function<void(std::vector<int32_t> &)> callback);
 
-    /**
+    /* *
      * @brief Obtains the information about an input device.
      * @param deviceId Indicates the ID of the input device whose information is to be obtained.
      * @param callback Indicates the callback used to receive the reported data.
@@ -255,7 +255,7 @@ public:
      */
     int32_t GetDevice(int32_t deviceId, std::function<void(std::shared_ptr<InputDevice>)> callback);
 
-    /**
+    /* *
      * @brief Checks whether the specified key codes of an input device are supported.
      * @param deviceId Indicates the ID of the input device.
      * @param keyCodes Indicates the key codes of the input device.
@@ -264,9 +264,9 @@ public:
      * @since 9
      */
     int32_t SupportKeys(int32_t deviceId, std::vector<int32_t> keyCodes,
-        std::function<void(std::vector<bool>&)> callback);
+        std::function<void(std::vector<bool> &)> callback);
 
-    /**
+    /* *
      * @brief Sets mouse primary button.
      * @param primaryButton Indicates the ID of the mouse primary button.The value 0 indicates that
      * the primary button is left button.The value 1 indicates that the primary button is right button.
@@ -275,7 +275,7 @@ public:
      */
     int32_t SetMousePrimaryButton(int32_t primaryButton);
 
-    /**
+    /* *
      * @brief Gets mouse primary button.
      * @param primaryButton Indicates the ID of the mouse primary button.The value 0 indicates that
      * the primary button is left button.The value 1 indicates that the primary button is right button.
@@ -284,7 +284,7 @@ public:
      */
     int32_t GetMousePrimaryButton(int32_t &primaryButton);
 
-    /**
+    /* *
      * @brief Sets whether the mouse hover scroll is enabled in inactive window.
      * @param state Indicates whether the mouse hover scroll is enabled in inactive window. The value true
      * indicates that the mouse hover scroll is enabled, and the value false indicates the opposite.
@@ -293,7 +293,7 @@ public:
      */
     int32_t SetHoverScrollState(bool state);
 
-    /**
+    /* *
      * @brief Gets a status whether the mouse hover scroll is enabled in inactive window.
      * @param state Indicates whether the mouse hover scroll is enabled in inactive window. The value true
      * indicates that the mouse hover scroll is enabled, and the value false indicates the opposite.
@@ -302,7 +302,7 @@ public:
      */
     int32_t GetHoverScrollState(bool &state);
 
-    /**
+    /* *
      * @brief Sets whether the pointer icon is visible.
      * @param visible Indicates whether the pointer icon is visible. The value <b>true</b> indicates that
      * the pointer icon is visible, and the value <b>false</b> indicates the opposite.
@@ -311,14 +311,14 @@ public:
      */
     int32_t SetPointerVisible(bool visible);
 
-    /**
+    /* *
      * @brief Checks whether the pointer icon is visible.
      * @return Returns <b>true</b> if the pointer icon is visible; returns <b>false</b> otherwise.
      * @since 9
      */
     bool IsPointerVisible();
 
-    /**
+    /* *
      * @brief Sets the mouse pointer style.
      * @param windowId Indicates the ID of the window for which the mouse pointer style is set.
      * @param pointerStyle Indicates the ID of the mouse pointer style.
@@ -327,7 +327,7 @@ public:
      */
     int32_t SetPointerStyle(int32_t windowId, PointerStyle pointerStyle);
 
-    /**
+    /* *
      * @brief Obtains the mouse pointer style.
      * @param windowId Indicates the ID of the window for which the mouse pointer style is obtained.
      * @param pointerStyle Indicates the ID of the mouse pointer style.
@@ -336,7 +336,7 @@ public:
      */
     int32_t GetPointerStyle(int32_t windowId, PointerStyle &pointerStyle);
 
-    /**
+    /* *
      * @brief Sets the mouse pointer speed, which ranges from 1 to 11.
      * @param speed Indicates the mouse pointer speed to set.
      * @return Returns <b>RET_OK</b> if success; returns <b>RET_ERR</b> otherwise.
@@ -344,7 +344,7 @@ public:
      */
     int32_t SetPointerSpeed(int32_t speed);
 
-    /**
+    /* *
      * @brief Obtains the mouse pointer speed.
      * @param speed Indicates the mouse pointer speed to get.
      * @return Returns the mouse pointer speed if the operation is successful; returns <b>RET_ERR</b> otherwise.
@@ -352,7 +352,7 @@ public:
      */
     int32_t GetPointerSpeed(int32_t &speed);
 
-    /**
+    /* *
      * @brief Queries the keyboard type.
      * @param deviceId Indicates the keyboard device ID.
      * @param callback Callback used to return the keyboard type.
@@ -361,7 +361,7 @@ public:
      */
     int32_t GetKeyboardType(int32_t deviceId, std::function<void(int32_t)> callback);
 
-    /**
+    /* *
      * @brief Sets the observer for events indicating that the application does not respond.
      * @param observer Indicates the observer for events indicating that the application does not respond.
      * @return void
@@ -369,7 +369,7 @@ public:
      */
     void SetAnrObserver(std::shared_ptr<IAnrObserver> observer);
 
-    /**
+    /* *
      * @brief Obtains the enablement status of the specified function key on the keyboard.
      * @param funcKey Indicates the function key. Currently, the following function keys are supported:
      * NUM_LOCK_FUNCTION_KEY
@@ -380,7 +380,7 @@ public:
      */
     bool GetFunctionKeyState(int32_t funcKey);
 
-    /**
+    /* *
      * @brief Sets the enablement status of the specified function key on the keyboard.
      * @param funcKey Indicates the function key. Currently, the following function keys are supported:
      * NUM_LOCK_FUNCTION_KEY
@@ -391,7 +391,7 @@ public:
      */
     int32_t SetFunctionKeyState(int32_t funcKey, bool enable);
 
-    /**
+    /* *
      * @brief Sets the absolute coordinate of mouse.
      * @param x Specifies the x coordinate of the mouse to be set.
      * @param y Specifies the y coordinate of the mouse to be set.
@@ -399,7 +399,7 @@ public:
      */
     void SetPointerLocation(int32_t x, int32_t y);
 
-    /**
+    /* *
      * @brief 进入捕获模式
      * @param windowId 窗口id.
      * @return 进入捕获模式成功或失败.
@@ -407,7 +407,7 @@ public:
      */
     int32_t EnterCaptureMode(int32_t windowId);
 
-    /**
+    /* *
      * @brief 退出捕获模式
      * @param windowId 窗口id.
      * @return 退出捕获模式成功或失败.
@@ -417,15 +417,15 @@ public:
 
     int32_t GetWindowPid(int32_t windowId);
 
-    /**
+    /* *
      * @brief pointer event添加辅助信息
      * @param extraData 添加的信息.
      * @return void
      * @since 9
      */
-    void AppendExtraData(const ExtraData& extraData);
+    void AppendExtraData(const ExtraData &extraData);
 
-    /**
+    /* *
      * @brief 使能或者禁用输入设备
      * @param enable 输入设备的使能状态
      * @return 返回0表示接口调用成功，否则，表示接口调用失败。
@@ -433,7 +433,7 @@ public:
      */
     int32_t EnableInputDevice(bool enable);
 
-     /**
+    /* *
      * @brief 自定义设置快捷键拉起ability延迟时间
      * @param businessId 应用在ability_launch_config.json中注册的唯一标识符.
      * @param delay 延迟时间 0-4000ms
