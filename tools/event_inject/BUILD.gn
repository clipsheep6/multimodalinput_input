# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/multimodalinput/input/multimodalinput_mini.gni")
module_output_path = "multimodalinput/unit_out"
HDF_FWKS = "//drivers/framework"

config("event_injection_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "//foundation/multimodalinput/input/common/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
  ]

  cflags = [
    "-DOHOS_BUILD",
    "-Wno-unused-parameter",
    "-Wno-implicit-int",
    "-Wno-return-type",
    "-Wno-unused-function",
    "-Wno-string-conversion",
    "-Wheader-hygiene",
    "-Wunused-private-field",
    "-Wsign-compare",
    "-Wformat",
    "-Wdeprecated-declarations",
  ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }
}

config("event_injection_public_config") {
  include_dirs = [
    "include",
    "//third_party/FreeBSD/sys/dev/evdev",
    "//third_party/json/include",
    "//third_party/json/include/nlohmann",
  ]
}

ohos_shared_library("event-injection") {
  sources = [
    "src/device_base.cpp",
    "src/get_device_node.cpp",
    "src/get_device_object.cpp",
    "src/injection_event_dispatch.cpp",
    "src/injection_tools_help_func.cpp",
    "src/manage_inject_device.cpp",
    "src/processing_finger_device.cpp",
    "src/processing_game_pad_device.cpp",
    "src/processing_joystick_device.cpp",
    "src/processing_keyboard_device.cpp",
    "src/processing_mouse_device.cpp",
    "src/processing_pad_device.cpp",
    "src/processing_pen_device.cpp",
    "src/processing_touch_screen_device.cpp",
    "src/send_message.cpp",
  ]

  configs = [
    ":event_injection_config",
    ":event_injection_public_config",
  ]

  deps = [
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/multimodalinput/input/frameworks/util:libmmi-util",
    "//foundation/multimodalinput/input/service/connect_manager:mmi_connect_manager_proxy",
    "//foundation/multimodalinput/input/service/filter:mmi_event_filter_service",
  ]

  if (is_mmi_have_libinput) {
    deps += [ "//foundation/multimodalinput/input/patch/diff_libinput_mmi:libinput-third-mmi" ]
  }

  part_name = "multimodalinput_base"
}

ohos_unittest("ut-event-injection-out") {
  module_out_path = module_output_path
  include_dirs = [
    "//drivers/peripheral/input/interfaces/include",
    "//drivers/adapter/uhdf2/adapter/osal/include",
    "//utils/native/base/include",
    "//third_party/googletest/googletest/include",
    "//utils/native/base/include",
    "${mmi_path}/common/include",
    "${mmi_path}/frameworks/proxy/event_handler",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/frameworks/util/common",
    "${mmi_path}/frameworks/util/common/include",
    "${mmi_path}/frameworks/util/network",
    "${mmi_path}/frameworks/util/network/include",
    "${mmi_path}/frameworks/util/socket",
    "${mmi_path}/frameworks/util/socket/include",
    "${mmi_path}/frameworks/proxy/event_handle",
    "${mmi_path}/frameworks/proxy/event_handle/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/common/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_path}/service/include",
    "${mmi_path}/service/device_scalability/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/event_standard/include",
    "${mmi_path}/service/libinput_adapter/include",
    "${mmi_path}/service/message_handle/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/tools/event_inject/include",
    "${mmi_path}/uinput",
    "$HDF_FWKS/include/utils",
    "$HDF_FWKS/include/osal",
    "$HDF_FWKS/core/adapter/syscall/include",
    "$HDF_FWKS/include/core",
    "$HDF_FWKS/ability/sbuf/include",
    "$HDF_FWKS/core/shared/include",
    "$HDF_FWKS/utils/include",
    "$HDF_FWKS/inclue",
  ]

  if (is_mmi_have_libinput) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  sources = [
    "test/device_base_test.cpp",
    "test/get_device_node_test.cpp",
    "test/get_device_object_test.cpp",
    "test/injection_tools_help_func_test.cpp",
    "test/processing_finger_device_test.cpp",
    "test/processing_game_pad_device_test.cpp",
    "test/processing_joystick_device_test.cpp",
    "test/processing_keyboard_device_test.cpp",
    "test/processing_mouse_device_test.cpp",
    "test/processing_pad_device_test.cpp",
    "test/processing_pen_device_test.cpp",
    "test/processing_touch_screen_device_test.cpp",
    "test/send_message_test.cpp",
  ]

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/frameworks/util:libmmi-util",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/tools/event_inject:event-injection",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  if (is_mmi_have_libinput) {
    deps += [ "//foundation/multimodalinput/input/patch/diff_libinput_mmi:libinput-third-mmi" ]
  }
  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
}

ohos_executable("mmi-event-injection") {
  sources = [ "src/mmi_event_simulate_main.cpp" ]

  configs = [ ":event_injection_public_config" ]

  deps = [
    "//foundation/multimodalinput/input/frameworks/util:libmmi-util",
    "//foundation/multimodalinput/input/tools/event_inject:event-injection",
  ]

  if (is_mmi_have_libinput) {
    deps += [ "//foundation/multimodalinput/input/patch/diff_libinput_mmi:libinput-third-mmi" ]
  }
  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  install_enable = true
  part_name = "multimodalinput_base"
}
