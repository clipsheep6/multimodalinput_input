diff a/service/connect_manager/include/i_multimodal_input_connect.h b/service/connect_manager/include/i_multimodal_input_connect.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -86,8 +86,8 @@ public:
     static constexpr int32_t MULTIMODAL_INPUT_CONNECT_SERVICE_ID = MULTIMODAL_INPUT_SERVICE_ID;
     DECLARE_INTERFACE_DESCRIPTOR(u"ohos.multimodalinput.IConnectManager");
 
-    virtual int32_t AllocSocketFd(const std::string &programName, const int32_t moduleType,
-        int32_t &socketFd, int32_t &tokenType) = 0;
+    virtual int32_t AllocSocketFd(const std::string &programName, const int32_t moduleType, int32_t &socketFd,
+        int32_t &tokenType) = 0;
     virtual int32_t AddInputEventFilter(sptr<IEventFilter> filter, int32_t filterId, int32_t priority,
         uint32_t deviceTags) = 0;
     virtual int32_t RemoveInputEventFilter(int32_t filterId) = 0;
@@ -108,10 +108,10 @@ public:
     virtual int32_t RegisterDevListener() = 0;
     virtual int32_t UnregisterDevListener() = 0;
     virtual int32_t GetKeyboardType(int32_t deviceId, int32_t &keyboardType) = 0;
-    virtual int32_t AddInputHandler(InputHandlerType handlerType, HandleEventType eventType,
-        int32_t priority, uint32_t deviceTags) = 0;
-    virtual int32_t RemoveInputHandler(InputHandlerType handlerType, HandleEventType eventType,
-        int32_t priority, uint32_t deviceTags) = 0;
+    virtual int32_t AddInputHandler(InputHandlerType handlerType, HandleEventType eventType, int32_t priority,
+        uint32_t deviceTags) = 0;
+    virtual int32_t RemoveInputHandler(InputHandlerType handlerType, HandleEventType eventType, int32_t priority,
+        uint32_t deviceTags) = 0;
     virtual int32_t MarkEventConsumed(int32_t eventId) = 0;
     virtual int32_t MoveMouseEvent(int32_t offsetX, int32_t offsetY) = 0;
     virtual int32_t InjectKeyEvent(const std::shared_ptr<KeyEvent> keyEvent) = 0;
@@ -128,7 +128,7 @@ public:
     virtual int32_t SetPointerLocation(int32_t x, int32_t y) = 0;
     virtual int32_t SetMouseCaptureMode(int32_t windowId, bool isCaptureMode) = 0;
     virtual int32_t GetWindowPid(int32_t windowId) = 0;
-    virtual int32_t AppendExtraData(const ExtraData& extraData) = 0;
+    virtual int32_t AppendExtraData(const ExtraData &extraData) = 0;
     virtual int32_t EnableInputDevice(bool enable) = 0;
     virtual int32_t SetKeyDownDuration(const std::string &businessId, int32_t delay) = 0;
 };
