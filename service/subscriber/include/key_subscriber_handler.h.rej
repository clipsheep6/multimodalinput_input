diff a/service/subscriber/include/key_subscriber_handler.h b/service/subscriber/include/key_subscriber_handler.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -45,20 +45,21 @@ public:
 #ifdef OHOS_BUILD_ENABLE_TOUCH
     void HandleTouchEvent(const std::shared_ptr<PointerEvent> pointerEvent) override;
 #endif // OHOS_BUILD_ENABLE_TOUCH
-    int32_t SubscribeKeyEvent(SessionPtr sess, int32_t subscribeId,
-            const std::shared_ptr<KeyOption> keyOption);
+    int32_t SubscribeKeyEvent(SessionPtr sess, int32_t subscribeId, const std::shared_ptr<KeyOption> keyOption);
     int32_t UnsubscribeKeyEvent(SessionPtr sess, int32_t subscribeId);
     void RemoveSubscriberKeyUpTimer(int32_t keyCode);
     void Dump(int32_t fd, const std::vector<std::string> &args);
+
 private:
     struct Subscriber {
         Subscriber(int32_t id, SessionPtr sess, std::shared_ptr<KeyOption> keyOption)
-            : id_(id), sess_(sess), keyOption_(keyOption), timerId_(-1) {}
-        int32_t id_ { -1 };
-        SessionPtr sess_ { nullptr };
-        std::shared_ptr<KeyOption> keyOption_ { nullptr };
-        int32_t timerId_ { -1 };
-        std::shared_ptr<KeyEvent> keyEvent_ { nullptr };
+            : id_(id), sess_(sess), keyOption_(keyOption), timerId_(-1)
+        {}
+        int32_t id_{ -1 };
+        SessionPtr sess_{ nullptr };
+        std::shared_ptr<KeyOption> keyOption_{ nullptr };
+        int32_t timerId_{ -1 };
+        std::shared_ptr<KeyEvent> keyEvent_{ nullptr };
     };
     void InsertSubScriber(std::shared_ptr<Subscriber> subs);
 
@@ -68,8 +69,7 @@ private:
     bool HandleKeyUp(const std::shared_ptr<KeyEvent> &keyEvent);
     bool HandleKeyCancel(const std::shared_ptr<KeyEvent> &keyEvent);
     bool IsPreKeysMatch(const std::set<int32_t> &preKeys, const std::vector<int32_t> &pressedKeys) const;
-    void NotifySubscriber(std::shared_ptr<KeyEvent> keyEvent,
-        const std::shared_ptr<Subscriber> &subscriber);
+    void NotifySubscriber(std::shared_ptr<KeyEvent> keyEvent, const std::shared_ptr<Subscriber> &subscriber);
     bool AddTimer(const std::shared_ptr<Subscriber> &subscriber, const std::shared_ptr<KeyEvent> &keyEvent);
     void ClearTimer(const std::shared_ptr<Subscriber> &subscriber);
     void OnTimer(const std::shared_ptr<Subscriber> subscriber);
@@ -83,11 +83,11 @@ private:
     void PrintKeyUpLog(const std::shared_ptr<Subscriber> &subscriber);
 
 private:
-    std::list<std::shared_ptr<Subscriber>> subscribers_ {};
-    bool callbackInitialized_ { false };
-    bool hasEventExecuting_ { false };
-    std::shared_ptr<KeyEvent> keyEvent_ { nullptr };
+    std::list<std::shared_ptr<Subscriber>> subscribers_{};
+    bool callbackInitialized_{ false };
+    bool hasEventExecuting_{ false };
+    std::shared_ptr<KeyEvent> keyEvent_{ nullptr };
 };
 } // namespace MMI
 } // namespace OHOS
-#endif  // KEY_SUBSCRIBER_HANDLER_H
+#endif // KEY_SUBSCRIBER_HANDLER_H
