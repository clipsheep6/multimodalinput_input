diff a/service/touch_event_normalize/src/joystick_transform_processor.cpp b/service/touch_event_normalize/src/joystick_transform_processor.cpp	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -25,16 +25,11 @@ constexpr OHOS::HiviewDFX::HiLogLabel LABEL = { LOG_CORE, MMI_LOG_DOMAIN, "Joyst
 
 JoystickTransformProcessor::JoystickTransformProcessor(int32_t deviceId) : deviceId_(deviceId)
 {
-    joystickType.emplace_back(
-        std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_X, PointerEvent::AXIS_TYPE_ABS_X));
-    joystickType.emplace_back(
-        std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_Y, PointerEvent::AXIS_TYPE_ABS_Y));
-    joystickType.emplace_back(
-        std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_Z, PointerEvent::AXIS_TYPE_ABS_Z));
-    joystickType.emplace_back(
-        std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_RZ, PointerEvent::AXIS_TYPE_ABS_RZ));
-    joystickType.emplace_back(
-        std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_GAS, PointerEvent::AXIS_TYPE_ABS_GAS));
+    joystickType.emplace_back(std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_X, PointerEvent::AXIS_TYPE_ABS_X));
+    joystickType.emplace_back(std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_Y, PointerEvent::AXIS_TYPE_ABS_Y));
+    joystickType.emplace_back(std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_Z, PointerEvent::AXIS_TYPE_ABS_Z));
+    joystickType.emplace_back(std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_RZ, PointerEvent::AXIS_TYPE_ABS_RZ));
+    joystickType.emplace_back(std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_GAS, PointerEvent::AXIS_TYPE_ABS_GAS));
     joystickType.emplace_back(
         std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_BRAKE, PointerEvent::AXIS_TYPE_ABS_BRAKE));
     joystickType.emplace_back(
@@ -45,7 +40,7 @@ JoystickTransformProcessor::JoystickTransformProcessor(int32_t deviceId) : devic
         std::make_pair(LIBINPUT_JOYSTICK_AXIS_SOURCE_ABS_THROTTLE, PointerEvent::AXIS_TYPE_ABS_THROTTLE));
 }
 
-bool JoystickTransformProcessor::OnEventJoystickButton(struct libinput_event* event)
+bool JoystickTransformProcessor::OnEventJoystickButton(struct libinput_event *event)
 {
     CALL_DEBUG_ENTER;
     CHKPF(event);
@@ -54,7 +49,7 @@ bool JoystickTransformProcessor::OnEventJoystickButton(struct libinput_event* ev
     int64_t time = GetSysClockTime();
     pointerEvent_->SetActionTime(time);
     pointerEvent_->SetActionStartTime(time);
-    pointerEvent_->SetDeviceId(deviceId_);   
+    pointerEvent_->SetDeviceId(deviceId_);
     uint32_t button = libinput_event_joystick_button_get_key(data);
     int32_t buttonId = LibinputButtonToPointer(button);
     if (buttonId == PointerEvent::BUTTON_NONE) {
@@ -98,7 +93,7 @@ bool JoystickTransformProcessor::OnEventJoystickAxis(struct libinput_event *even
 
     for (const auto &item : joystickType) {
         if (libinput_event_get_joystick_axis_value_is_changed(data, item.first) != 0) {
-            struct libinput_event_joystick_axis_abs_info* axisInfo = 
+            struct libinput_event_joystick_axis_abs_info *axisInfo =
                 libinput_event_get_joystick_axis_abs_info(data, item.first);
             CHKPF(axisInfo);
             pointerEvent_->SetAxisValue(item.second, axisInfo->value);
@@ -138,7 +133,7 @@ std::shared_ptr<PointerEvent> JoystickTransformProcessor::OnEvent(struct libinpu
         }
     }
     WinMgr->UpdateTargetPointer(pointerEvent_);
-   
+
     return pointerEvent_;
 }
 } // namespace MMI
