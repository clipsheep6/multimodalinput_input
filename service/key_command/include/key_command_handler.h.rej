diff a/service/key_command/include/key_command_handler.h b/service/key_command/include/key_command_handler.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -53,20 +53,20 @@ struct Ability {
 struct ShortcutKey {
     std::set<int32_t> preKeys;
     std::string businessId;
-    int32_t finalKey { -1 };
-    int32_t keyDownDuration { 0 };
-    int32_t triggerType { KeyEvent::KEY_ACTION_DOWN };
-    int32_t timerId { -1 };
+    int32_t finalKey{ -1 };
+    int32_t keyDownDuration{ 0 };
+    int32_t triggerType{ KeyEvent::KEY_ACTION_DOWN };
+    int32_t timerId{ -1 };
     Ability ability;
     void Print() const;
 };
 
 struct SequenceKey {
-    int32_t keyCode { -1 };
-    int32_t keyAction { 0 };
-    int64_t actionTime { 0 };
-    int64_t delay { 0 };
-    bool operator!=(const SequenceKey &sequenceKey)
+    int32_t keyCode{ -1 };
+    int32_t keyAction{ 0 };
+    int64_t actionTime{ 0 };
+    int64_t delay{ 0 };
+    bool operator != (const SequenceKey &sequenceKey)
     {
         return (keyCode != sequenceKey.keyCode) || (keyAction != sequenceKey.keyAction);
     }
@@ -74,8 +74,8 @@ struct SequenceKey {
 
 struct Sequence {
     std::vector<SequenceKey> sequenceKeys;
-    int64_t abilityStartDelay { 0 };
-    int32_t timerId { -1 };
+    int64_t abilityStartDelay{ 0 };
+    int32_t timerId{ -1 };
     Ability ability;
 };
 
@@ -86,9 +86,9 @@ struct TwoFingerGesture {
     int64_t abilityStartDelay = 0;
     Ability ability;
     struct {
-        int32_t id { 0 };
-        int32_t x { 0 };
-        int32_t y { 0 };
+        int32_t id{ 0 };
+        int32_t x{ 0 };
+        int32_t y{ 0 };
     } touches[MAX_TOUCH_NUM];
 };
 
@@ -108,6 +108,7 @@ public:
     void HandleTouchEvent(const std::shared_ptr<PointerEvent> pointerEvent) override;
 #endif // OHOS_BUILD_ENABLE_TOUCH
     bool OnHandleEvent(const std::shared_ptr<KeyEvent> keyEvent);
+
 private:
     void Print();
     void PrintSeq();
@@ -121,7 +122,7 @@ private:
     bool HandleKeyUp(const std::shared_ptr<KeyEvent> &keyEvent, const ShortcutKey &shortcutKey);
     bool HandleKeyDown(ShortcutKey &shortcutKey);
     bool HandleKeyCancel(ShortcutKey &shortcutKey);
-    bool HandleSequence(Sequence& sequence, bool &isLaunchAbility);
+    bool HandleSequence(Sequence &sequence, bool &isLaunchAbility);
     bool HandleSequences(const std::shared_ptr<KeyEvent> keyEvent);
     bool HandleShortKeys(const std::shared_ptr<KeyEvent> keyEvent);
     bool AddSequenceKey(const std::shared_ptr<KeyEvent> keyEvent);
@@ -142,7 +143,7 @@ private:
         filterSequences_.clear();
     }
     bool SkipFinalKey(const int32_t keyCode, const std::shared_ptr<KeyEvent> &key);
-    void OnHandleTouchEvent(const std::shared_ptr<PointerEvent>& touchEvent);
+    void OnHandleTouchEvent(const std::shared_ptr<PointerEvent> &touchEvent);
     void StartTwoFingerGesture();
     void StopTwoFingerGesture();
 
@@ -153,7 +154,7 @@ private:
     std::vector<Sequence> filterSequences_;
     std::vector<SequenceKey> keys_;
     std::vector<std::string> businessIds_;
-    bool isParseConfig_ { false };
+    bool isParseConfig_{ false };
     std::map<int32_t, int32_t> specialKeys_;
     std::map<int32_t, std::list<int32_t>> specialTimers_;
     TwoFingerGesture twoFingerGesture_;
