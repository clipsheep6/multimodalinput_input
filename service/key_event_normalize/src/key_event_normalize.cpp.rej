diff a/service/key_event_normalize/src/key_event_normalize.cpp b/service/key_event_normalize/src/key_event_normalize.cpp	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -53,8 +53,8 @@ int32_t KeyEventNormalize::Normalize(struct libinput_event *event, std::shared_p
     int32_t keyCode = static_cast<int32_t>(libinput_event_keyboard_get_key(data));
     MMI_HILOGD("The linux input keyCode:%{public}d", keyCode);
     keyCode = KeyMapMgr->TransferDeviceKeyValue(device, keyCode);
-    int32_t keyAction = (libinput_event_keyboard_get_key_state(data) == 0) ?
-        (KeyEvent::KEY_ACTION_UP) : (KeyEvent::KEY_ACTION_DOWN);
+    int32_t keyAction =
+        (libinput_event_keyboard_get_key_state(data) == 0) ? (KeyEvent::KEY_ACTION_UP) : (KeyEvent::KEY_ACTION_DOWN);
     auto preAction = keyEvent->GetAction();
     if (preAction == KeyEvent::KEY_ACTION_UP) {
         std::optional<KeyEvent::KeyItem> preUpKeyItem = keyEvent->GetKeyItem();
@@ -90,8 +90,8 @@ int32_t KeyEventNormalize::Normalize(struct libinput_event *event, std::shared_p
         if (funcKey != KeyEvent::UNKNOWN_FUNCTION_KEY) {
             int32_t ret = keyEvent->SetFunctionKey(funcKey, libinput_get_funckey_state(device, funcKey));
             if (ret == funcKey) {
-                MMI_HILOGD("Set function key:%{public}d to state:%{public}d succeed",
-                           funcKey, keyEvent->GetFunctionKey(funcKey));
+                MMI_HILOGD("Set function key:%{public}d to state:%{public}d succeed", funcKey,
+                    keyEvent->GetFunctionKey(funcKey));
             }
         }
         std::optional<KeyEvent::KeyItem> pressedKeyItem = keyEvent->GetKeyItem(keyCode);
@@ -108,7 +108,7 @@ int32_t KeyEventNormalize::Normalize(struct libinput_event *event, std::shared_p
     return RET_OK;
 }
 
-void KeyEventNormalize::ResetKeyEvent(struct libinput_device* device)
+void KeyEventNormalize::ResetKeyEvent(struct libinput_device *device)
 {
     if (InputDevMgr->IsKeyboardDevice(device) || InputDevMgr->IsPointerDevice(device)) {
         if (keyEvent_ == nullptr) {
@@ -116,11 +116,8 @@ void KeyEventNormalize::ResetKeyEvent(struct libinput_device* device)
         }
         if (libinput_has_event_led_type(device)) {
             CHKPV(keyEvent_);
-            const std::vector<int32_t> funcKeys = {
-                KeyEvent::NUM_LOCK_FUNCTION_KEY,
-                KeyEvent::CAPS_LOCK_FUNCTION_KEY,
-                KeyEvent::SCROLL_LOCK_FUNCTION_KEY
-            };
+            const std::vector<int32_t> funcKeys = { KeyEvent::NUM_LOCK_FUNCTION_KEY, KeyEvent::CAPS_LOCK_FUNCTION_KEY,
+                                                    KeyEvent::SCROLL_LOCK_FUNCTION_KEY };
             for (const auto &funcKey : funcKeys) {
                 keyEvent_->SetFunctionKey(funcKey, libinput_get_funckey_state(device, funcKey));
             }
