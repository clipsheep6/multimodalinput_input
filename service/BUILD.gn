# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimodalinput/input/multimodalinput_mini.gni")
mmi_service_path = "${mmi_path}/service"

config("libmmi_server_config") {
  include_dirs = [
    "device_manager/include",
    "device_scalability/include",
    "event_dispatch/include",
    "event_package/include",
    "event_handler/include",
    "event_dump/include",
    "monitor/include",
    "interceptor/include",
    "libinput_adapter/include",
    "message_handle/include",
    "module_loader/include",
    "window_manager/include",
    "touch_transform_point/include",
    "ability_launch/include",
    "subscriber/include",
    "timer_manager/include",
    "${mmi_service_path}/connect_manager/include",
    "${mmi_service_path}/filter/include",
    "${mmi_service_path}/module_loader/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "mouse_event_handler/include",
    "//foundation/multimodalinput/interfaces/native/innerkits/event/include",
    "//foundation/graphic/standard/rosen/modules/2d_graphics/include",
    "//foundation/graphic/standard/rosen/modules/2d_graphics/src",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/common/include",
    "//foundation/multimodalinput/input/util/common/include",
    "//foundation/multimodalinput/input/util/socket/include",
    "//foundation/multimodalinput/input/util/network/include",
    "//foundation/multimodalinput/input/frameworks/proxy/event_handler/include",
  ]

  if (is_mmi_have_hdf) {
    include_dirs += [
      "hdf_adapter/include",
      "hdi_inject/include",
      "$root_out_dir/diff_libinput_mmi/export_include",
      "//third_party/eudev/export_include/",
      "$root_out_dir/diff_libevdev_hdf/export_include",
      "$root_out_dir/diff_libinput_mmi/include/linux",
    ]
  }

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  if (is_mmi_have_hdf) {
    cflags += [ "-DOHOS_BUILD_HDF" ]
  }
}

ohos_prebuilt_etc("multimodalinput_config_ability.json") {
  source = "ability_launch/etc/ability_launch_config.json"
  part_name = "input"
  subsystem_name = "multimodalinput"
  relative_install_dir = "multimodalinput"
}

ohos_prebuilt_etc("drawing_pointer_image") {
  source = "//foundation/multimodalinput/input/util/source_icon/angle.png"
  part_name = "input"
  subsystem_name = "multimodalinput"
  relative_install_dir = "multimodalinput/mouse_icon"
}

ohos_shared_library("libmmi-server") {
  sources = [
    "//foundation/multimodalinput/input/frameworks/proxy/event_handler/src/bytrace_adapter.cpp",
    "ability_launch/src/ability_launch_manager.cpp",
    "device_manager/src/input_device.cpp",
    "device_manager/src/input_device_manager.cpp",
    "event_dispatch/src/event_dispatch.cpp",
    "event_dump/src/event_dump.cpp",
    "event_handler/src/input_event_handler.cpp",
    "event_handler/src/key_event_value_transformation.cpp",
    "event_package/src/event_package.cpp",
    "interceptor/src/interceptor_manager_global.cpp",
    "libinput_adapter/src/libinput_adapter.cpp",
    "message_handle/src/server_msg_handler.cpp",
    "module_loader/src/uds_server.cpp",
    "monitor/src/input_event_monitor_manager.cpp",
    "monitor/src/input_handler_manager_global.cpp",
    "mouse_event_handler/src/mouse_device_state.cpp",
    "mouse_event_handler/src/mouse_event_handler.cpp",
    "subscriber/src/key_event_subscriber.cpp",
    "subscriber/src/key_option.cpp",
    "timer_manager/src/timer_manager.cpp",
    "touch_transform_point/src/gesture_transform_point_processor.cpp",
    "touch_transform_point/src/touch_transform_point_manager.cpp",
    "touch_transform_point/src/touch_transform_point_processor.cpp",
    "touch_transform_point/src/touchpad_transform_point_processor.cpp",
    "window_manager/src/input_windows_manager.cpp",
    "window_manager/src/pointer_drawing_manager.cpp",
  ]

  if (is_mmi_have_hdf) {
    sources += [
      "hdf_adapter/src/hdf_event_manager.cpp",
      "hdi_inject/src/hdi_inject.cpp",
    ]
  }

  sources += [ "module_loader/src/mmi_service.cpp" ]

  configs = [ ":libmmi_server_config" ]

  deps = [
    ":drawing_pointer_image",
    ":mmi_device_config.ini",
    ":multimodalinput_config_ability.json",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
    "//foundation/aafwk/standard/frameworks/kits/appkit:appkit_native",
    "//foundation/aafwk/standard/interfaces/innerkits/ability_manager:ability_manager",
    "//foundation/aafwk/standard/interfaces/innerkits/base:base",
    "//foundation/aafwk/standard/interfaces/innerkits/want:want",
    "//foundation/aafwk/standard/services/abilitymgr:abilityms",
    "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler:libeventhandler",
    "//foundation/graphic/standard/rosen/modules/2d_graphics:2d_graphics",
    "//foundation/graphic/standard/rosen/modules/render_service_client:librender_service_client",
    "//foundation/multimedia/image_standard:image_framework",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-common",
    "//foundation/multimodalinput/input/service/connect_manager:mmi_connect_manager_service",
    "//foundation/multimodalinput/input/service/filter:mmi_event_filter_proxy",
    "//foundation/multimodalinput/input/util:libmmi-util",
    "//foundation/windowmanager/wm:libwm",
  ]

  if (is_mmi_have_libinput || is_mmi_have_hdf) {
    deps += [ "//foundation/multimodalinput/input/patch/diff_libinput_mmi:libinput-third-mmi" ]
  }

  external_deps = [
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bytrace_standard:bytrace_core",
    "hisysevent_native:libhisysevent",
    "hiviewdfx_hilog_native:libhilog",
    "input_device_driver:hdi_input",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "utils_base:utils",
  ]

  part_name = "input"
}

ohos_prebuilt_etc("mmi_device_config.ini") {
  source = "mmi_device_config.ini"
  relative_install_dir = "."
  subsystem_name = "multimodalinput"
  part_name = "input"
}

import("//build/test.gni")
module_output_path = "multimodalinput/unit_out"
HDF_FWKS = "//drivers/framework"

ohos_unittest("ut-mmi-service-out") {
  module_out_path = module_output_path
  include_dirs = [
    "${mmi_path}/frameworks/proxy/event_handler",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/util/common",
    "${mmi_path}/util/common/include",
    "${mmi_path}/util/network",
    "${mmi_path}/util/network/include",
    "${mmi_path}/util/socket",
    "${mmi_path}/util/socket/include",
    "${mmi_path}/frameworks/proxy/event_handle",
    "${mmi_path}/frameworks/proxy/event_handle/include",
    "${mmi_path}/frameworks/proxy/module_loader",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_path}/service/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/device_scalability/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_package/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/hdi_inject/include",
    "${mmi_path}/service/event_dump/include",
    "${mmi_path}/service/hdf_adapter/include",
    "${mmi_path}/service/libinput_adapter/include",
    "${mmi_path}/service/message_handle/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/uinput",
    "$HDF_FWKS/inclue",
  ]

  if (is_mmi_have_libinput || is_mmi_have_hdf) {
    include_dirs += [ "$root_out_dir/diff_libinput_mmi/export_include" ]
  }

  sources = [
    "event_dispatch/test/event_dispatch_test.cpp",
    "hdi_inject/test/hdi_inject_test.cpp",
    "message_handle/test/server_msg_handler_test.cpp",
    "module_loader/test/uds_server_test.cpp",
    "window_manager/test/input_windows_manager_test.cpp",
  ]

  cflags = [ "-DOHOS_BUILD" ]

  if (is_mmi_have_debug) {
    cflags += [ "-DOHOS_BUILD_MMI_DEBUG" ]
  }

  if (is_mmi_have_libinput) {
    cflags += [ "-DOHOS_BUILD_LIBINPUT" ]
  }

  if (is_mmi_have_hdf) {
    cflags += [ "-DOHOS_BUILD_HDF" ]
  }

  configs = [ ":libmmi_server_config" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//foundation/aafwk/standard/frameworks/kits/appkit:appkit_native",
    "//foundation/aafwk/standard/interfaces/innerkits/ability_manager:ability_manager",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  if (is_mmi_have_libinput || is_mmi_have_hdf) {
    deps += [ "//foundation/multimodalinput/input/patch/diff_libinput_mmi:libinput-third-mmi" ]
  }

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "input_device_driver:hdi_input",
    "utils_base:utils",
  ]
}

group("ut-mmi-service") {
  testonly = true
  deps = [ ":ut-mmi-service-out" ]
}
