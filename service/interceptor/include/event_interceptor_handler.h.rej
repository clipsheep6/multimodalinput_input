diff a/service/interceptor/include/event_interceptor_handler.h b/service/interceptor/include/event_interceptor_handler.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -41,10 +41,10 @@ public:
 #ifdef OHOS_BUILD_ENABLE_TOUCH
     void HandleTouchEvent(const std::shared_ptr<PointerEvent> pointerEvent) override;
 #endif // OHOS_BUILD_ENABLE_TOUCH
-    int32_t AddInputHandler(InputHandlerType handlerType, HandleEventType eventType,
-        int32_t priority, uint32_t deviceTags, SessionPtr session);
-    void RemoveInputHandler(InputHandlerType handlerType, HandleEventType eventType,
-        int32_t priority, uint32_t deviceTags, SessionPtr session);
+    int32_t AddInputHandler(InputHandlerType handlerType, HandleEventType eventType, int32_t priority,
+        uint32_t deviceTags, SessionPtr session);
+    void RemoveInputHandler(InputHandlerType handlerType, HandleEventType eventType, int32_t priority,
+        uint32_t deviceTags, SessionPtr session);
 #ifdef OHOS_BUILD_ENABLE_KEYBOARD
     bool OnHandleEvent(std::shared_ptr<KeyEvent> keyEvent);
 #endif // OHOS_BUILD_ENABLE_KEYBOARD
@@ -58,17 +58,21 @@ private:
 private:
     class SessionHandler {
     public:
-        SessionHandler(InputHandlerType handlerType, HandleEventType eventType, int32_t priority,
-            uint32_t deviceTags, SessionPtr session) : handlerType_(handlerType),
-            eventType_(eventType & HANDLE_EVENT_TYPE_ALL), priority_(priority), deviceTags_(deviceTags),
-            session_(session) {}
+        SessionHandler(InputHandlerType handlerType, HandleEventType eventType, int32_t priority, uint32_t deviceTags,
+            SessionPtr session)
+            : handlerType_(handlerType),
+              eventType_(eventType & HANDLE_EVENT_TYPE_ALL),
+              priority_(priority),
+              deviceTags_(deviceTags),
+              session_(session)
+        {}
         void SendToClient(std::shared_ptr<KeyEvent> keyEvent) const;
         void SendToClient(std::shared_ptr<PointerEvent> pointerEvent) const;
-        InputHandlerType handlerType_ { NONE };
-        HandleEventType eventType_ { HANDLE_EVENT_TYPE_ALL };
-        int32_t priority_ { DEFUALT_INTERCEPTOR_PRIORITY };
-        uint32_t deviceTags_ { CapabilityToTags(InputDeviceCapability::INPUT_DEV_CAP_MAX) };
-        SessionPtr session_ { nullptr };
+        InputHandlerType handlerType_{ NONE };
+        HandleEventType eventType_{ HANDLE_EVENT_TYPE_ALL };
+        int32_t priority_{ DEFUALT_INTERCEPTOR_PRIORITY };
+        uint32_t deviceTags_{ CapabilityToTags(InputDeviceCapability::INPUT_DEV_CAP_MAX) };
+        SessionPtr session_{ nullptr };
     };
 
     class InterceptorCollection final : public IInputEventCollectionHandler, protected NoCopyable {
@@ -79,15 +83,15 @@ private:
 #if defined(OHOS_BUILD_ENABLE_POINTER) || defined(OHOS_BUILD_ENABLE_TOUCH)
         bool HandleEvent(std::shared_ptr<PointerEvent> pointerEvent) override;
 #endif // OHOS_BUILD_ENABLE_POINTER || OHOS_BUILD_ENABLE_TOUCH
-        int32_t AddInterceptor(const SessionHandler& interceptor);
-        void RemoveInterceptor(const SessionHandler& interceptor);
+        int32_t AddInterceptor(const SessionHandler &interceptor);
+        void RemoveInterceptor(const SessionHandler &interceptor);
         void OnSessionLost(SessionPtr session);
         void Dump(int32_t fd, const std::vector<std::string> &args);
         std::list<SessionHandler> interceptors_;
     };
 
 private:
-    bool sessionLostCallbackInitialized_ { false };
+    bool sessionLostCallbackInitialized_{ false };
     InterceptorCollection interceptors_;
 };
 } // namespace MMI
