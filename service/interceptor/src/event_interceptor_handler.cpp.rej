diff a/service/interceptor/src/event_interceptor_handler.cpp b/service/interceptor/src/event_interceptor_handler.cpp	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -37,8 +37,7 @@ void EventInterceptorHandler::HandleKeyEvent(const std::shared_ptr<KeyEvent> key
 {
     CHKPV(keyEvent);
     if (OnHandleEvent(keyEvent)) {
-        MMI_HILOGD("KeyEvent filter find a keyEvent from Original event keyCode:%{public}d",
-            keyEvent->GetKeyCode());
+        MMI_HILOGD("KeyEvent filter find a keyEvent from Original event keyCode:%{public}d", keyEvent->GetKeyCode());
         BytraceAdapter::StartBytrace(keyEvent, BytraceAdapter::KEY_INTERCEPT_EVENT);
         return;
     }
@@ -75,8 +74,8 @@ void EventInterceptorHandler::HandleTouchEvent(const std::shared_ptr<PointerEven
 }
 #endif // OHOS_BUILD_ENABLE_TOUCH
 
-int32_t EventInterceptorHandler::AddInputHandler(InputHandlerType handlerType,
-    HandleEventType eventType, int32_t priority, uint32_t deviceTags, SessionPtr session)
+int32_t EventInterceptorHandler::AddInputHandler(InputHandlerType handlerType, HandleEventType eventType,
+    int32_t priority, uint32_t deviceTags, SessionPtr session)
 {
     CALL_INFO_TRACE;
     CHKPR(session, RET_ERR);
@@ -85,19 +84,19 @@ int32_t EventInterceptorHandler::AddInputHandler(InputHandlerType handlerType,
         return RET_ERR;
     }
     InitSessionLostCallback();
-    SessionHandler interceptor { handlerType, eventType, priority, deviceTags, session };
-    MMI_HILOGD("handlerType:%{public}d, eventType:%{public}d, deviceTags:%{public}d, priority:%{public}d",
-        handlerType, eventType, deviceTags, priority);
+    SessionHandler interceptor{ handlerType, eventType, priority, deviceTags, session };
+    MMI_HILOGD("handlerType:%{public}d, eventType:%{public}d, deviceTags:%{public}d, priority:%{public}d", handlerType,
+        eventType, deviceTags, priority);
     return interceptors_.AddInterceptor(interceptor);
 }
 
-void EventInterceptorHandler::RemoveInputHandler(InputHandlerType handlerType,
-    HandleEventType eventType, int32_t priority, uint32_t deviceTags, SessionPtr session)
+void EventInterceptorHandler::RemoveInputHandler(InputHandlerType handlerType, HandleEventType eventType,
+    int32_t priority, uint32_t deviceTags, SessionPtr session)
 {
     CALL_INFO_TRACE;
     CHKPV(session);
     if (handlerType == InputHandlerType::INTERCEPTOR) {
-        SessionHandler interceptor { handlerType, eventType, priority, deviceTags, session };
+        SessionHandler interceptor{ handlerType, eventType, priority, deviceTags, session };
         MMI_HILOGD("handlerType:%{public}d, eventType:%{public}d, deviceTags:%{public}d, priority:%{public}d",
             handlerType, eventType, deviceTags, priority);
         interceptors_.RemoveInterceptor(interceptor);
@@ -130,14 +129,14 @@ bool EventInterceptorHandler::OnHandleEvent(std::shared_ptr<PointerEvent> pointe
 
 void EventInterceptorHandler::InitSessionLostCallback()
 {
-    if (sessionLostCallbackInitialized_)  {
+    if (sessionLostCallbackInitialized_) {
         MMI_HILOGE("Init session is failed");
         return;
     }
     auto udsServerPtr = InputHandler->GetUDSServer();
     CHKPV(udsServerPtr);
-    udsServerPtr->AddSessionDeletedCallback(std::bind(
-        &EventInterceptorHandler::OnSessionLost, this, std::placeholders::_1));
+    udsServerPtr->AddSessionDeletedCallback(
+        std::bind(&EventInterceptorHandler::OnSessionLost, this, std::placeholders::_1));
     sessionLostCallbackInitialized_ = true;
     MMI_HILOGD("The callback on session deleted is registered successfully");
 }
@@ -205,8 +204,7 @@ bool EventInterceptorHandler::InterceptorCollection::HandleEvent(std::shared_ptr
     CHKPF(inputDevice);
     uint32_t capKeyboard = CapabilityToTags(InputDeviceCapability::INPUT_DEV_CAP_KEYBOARD);
     for (const auto &interceptor : interceptors_) {
-        MMI_HILOGD("eventType:%{public}d, deviceTags:%{public}d",
-            interceptor.eventType_, interceptor.deviceTags_);
+        MMI_HILOGD("eventType:%{public}d, deviceTags:%{public}d", interceptor.eventType_, interceptor.deviceTags_);
         if ((capKeyboard & interceptor.deviceTags_) == 0) {
             MMI_HILOGD("Interceptor cap does not have keyboard");
             continue;
@@ -246,8 +244,7 @@ bool EventInterceptorHandler::InterceptorCollection::HandleEvent(std::shared_ptr
     uint32_t capPointer = CapabilityToTags(InputDeviceCapability::INPUT_DEV_CAP_POINTER);
     uint32_t capTouch = CapabilityToTags(InputDeviceCapability::INPUT_DEV_CAP_TOUCH);
     for (const auto &interceptor : interceptors_) {
-        MMI_HILOGD("eventType:%{public}d, deviceTags:%{public}d",
-            interceptor.eventType_, interceptor.deviceTags_);
+        MMI_HILOGD("eventType:%{public}d, deviceTags:%{public}d", interceptor.eventType_, interceptor.deviceTags_);
         if (((capPointer | capTouch) & interceptor.deviceTags_) == 0) {
             MMI_HILOGD("Interceptor cap does not have pointer or touch");
             continue;
@@ -266,7 +263,7 @@ bool EventInterceptorHandler::InterceptorCollection::HandleEvent(std::shared_ptr
 }
 #endif // OHOS_BUILD_ENABLE_POINTER || OHOS_BUILD_ENABLE_TOUCH
 
-int32_t EventInterceptorHandler::InterceptorCollection::AddInterceptor(const SessionHandler& interceptor)
+int32_t EventInterceptorHandler::InterceptorCollection::AddInterceptor(const SessionHandler &interceptor)
 {
     for (auto iter = interceptors_.begin(); iter != interceptors_.end(); ++iter) {
         if (iter->session_ == interceptor.session_) {
@@ -294,7 +291,7 @@ int32_t EventInterceptorHandler::InterceptorCollection::AddInterceptor(const Ses
     return RET_OK;
 }
 
-void EventInterceptorHandler::InterceptorCollection::RemoveInterceptor(const SessionHandler& interceptor)
+void EventInterceptorHandler::InterceptorCollection::RemoveInterceptor(const SessionHandler &interceptor)
 {
     for (auto iter = interceptors_.begin(); iter != interceptors_.end(); ++iter) {
         if (iter->session_ == interceptor.session_) {
@@ -348,12 +345,10 @@ void EventInterceptorHandler::InterceptorCollection::Dump(int32_t fd, const std:
         SessionPtr session = item.session_;
         CHKPV(session);
         mprintf(fd,
-                "handlerType:%d | eventType:%d | Pid:%d | Uid:%d | Fd:%d "
-                "| EarliestEventTime:%" PRId64 " | Descript:%s \t",
-                item.handlerType_, item.eventType_,
-                session->GetPid(), session->GetUid(),
-                session->GetFd(),
-                session->GetEarliestEventTime(), session->GetDescript().c_str());
+            "handlerType:%d | eventType:%d | Pid:%d | Uid:%d | Fd:%d "
+            "| EarliestEventTime:%" PRId64 " | Descript:%s \t",
+            item.handlerType_, item.eventType_, session->GetPid(), session->GetUid(), session->GetFd(),
+            session->GetEarliestEventTime(), session->GetDescript().c_str());
     }
 }
 } // namespace MMI
