diff a/service/window_manager/test/input_display_bind_helper_test.cpp b/service/window_manager/test/input_display_bind_helper_test.cpp	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -32,19 +32,22 @@ public:
     static void TearDownTestCase(void) {}
     static bool WriteConfigFile(const std::string &content);
     static inline const std::string bindCfgFile_ = "input_display_bind_helper.cfg";
-    static std::string GetCfgFileName() { return bindCfgFile_; }
+    static std::string GetCfgFileName()
+    {
+        return bindCfgFile_;
+    }
 };
 
 bool InputDisplayBindHelperTest::WriteConfigFile(const std::string &content)
 {
     const std::string &fileName = InputDisplayBindHelperTest::bindCfgFile_;
-    std::ofstream ofs(fileName.c_str()); 
-	if (!ofs) {
-		MMI_HILOGE("Open file fail.%s\n", fileName.c_str());
-		return false;
-	}
-	ofs << content;
-	ofs.close();
+    std::ofstream ofs(fileName.c_str());
+    if (!ofs) {
+        MMI_HILOGE("Open file fail.%s\n", fileName.c_str());
+        return false;
+    }
+    ofs << content;
+    ofs.close();
     return true;
 }
 
@@ -57,15 +60,15 @@ bool InputDisplayBindHelperTest::WriteConfigFile(const std::string &content)
 HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_001, TestSize.Level1)
 {
     InputDisplayBindHelperTest::WriteConfigFile("");
-	InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
-	// 多模初始化
-	bindInfo.Load();
-	// 检测到触摸板设备
-	bindInfo.AddInputDevice(1, "mouse");
-	bindInfo.AddInputDevice(2, "keyboard");
-	// 窗口同步信息
-	bindInfo.AddDisplay(0, "hp 223");
-	bindInfo.AddDisplay(2, "think 123");
+    InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
+    // 多模初始化
+    bindInfo.Load();
+    // 检测到触摸板设备
+    bindInfo.AddInputDevice(1, "mouse");
+    bindInfo.AddInputDevice(2, "keyboard");
+    // 窗口同步信息
+    bindInfo.AddDisplay(0, "hp 223");
+    bindInfo.AddDisplay(2, "think 123");
     ASSERT_EQ(bindInfo.Dumps(), std::string("mouse<=>hp 223\nkeyboard<=>think 123\n"));
 }
 
@@ -78,15 +81,15 @@ HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_001, TestSize.Le
 HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_002, TestSize.Level1)
 {
     InputDisplayBindHelperTest::WriteConfigFile("mouse<=>hp 223\nkeyboard<=>think 123\n");
-	InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
-	// 多模初始化
-	bindInfo.Load();
-	// 检测到触摸板设备
-	bindInfo.AddInputDevice(1, "mouse");
-	bindInfo.AddInputDevice(2, "keyboard");
-	// 窗口同步信息
-	bindInfo.AddDisplay(0, "hp 223");
-	bindInfo.AddDisplay(2, "think 123");
+    InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
+    // 多模初始化
+    bindInfo.Load();
+    // 检测到触摸板设备
+    bindInfo.AddInputDevice(1, "mouse");
+    bindInfo.AddInputDevice(2, "keyboard");
+    // 窗口同步信息
+    bindInfo.AddDisplay(0, "hp 223");
+    bindInfo.AddDisplay(2, "think 123");
     ASSERT_EQ(bindInfo.Dumps(), std::string("mouse<=>hp 223\nkeyboard<=>think 123\n"));
 }
 
@@ -99,15 +102,15 @@ HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_002, TestSize.Le
 HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_003, TestSize.Level1)
 {
     InputDisplayBindHelperTest::WriteConfigFile("mouse<=>think 123\nkeyboard<=>hp 223\n");
-	InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
-	// 多模初始化
-	bindInfo.Load();
-	// 检测到触摸板设备
-	bindInfo.AddInputDevice(1, "mouse");
-	bindInfo.AddInputDevice(2, "keyboard");
-	// 窗口同步信息
-	bindInfo.AddDisplay(0, "hp 223");
-	bindInfo.AddDisplay(2, "think 123");
+    InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
+    // 多模初始化
+    bindInfo.Load();
+    // 检测到触摸板设备
+    bindInfo.AddInputDevice(1, "mouse");
+    bindInfo.AddInputDevice(2, "keyboard");
+    // 窗口同步信息
+    bindInfo.AddDisplay(0, "hp 223");
+    bindInfo.AddDisplay(2, "think 123");
     ASSERT_EQ(bindInfo.Dumps(), std::string("mouse<=>think 123\nkeyboard<=>hp 223\n"));
 }
 
@@ -120,39 +123,39 @@ HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_003, TestSize.Le
 HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_004, TestSize.Level1)
 {
     InputDisplayBindHelperTest::WriteConfigFile("");
-	InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
-	// 多模初始化
-	bindInfo.Load();
-	// 检测到触摸板设备
-	bindInfo.AddInputDevice(1, "mouse");
-	bindInfo.AddInputDevice(2, "keyboard");
-	// 窗口同步信息
-	bindInfo.AddDisplay(0, "hp 223");
-	bindInfo.AddDisplay(2, "think 123");
-	// 显示屏移除
-	bindInfo.RemoveDisplay(2);
-	bindInfo.RemoveDisplay(0);
-	// 输入设备移除
-	bindInfo.RemoveInputDevice(1);
-	bindInfo.RemoveInputDevice(2);
-	bindInfo.RemoveInputDevice(3);
-	// 窗口同步信息
-	bindInfo.AddDisplay(0, "hp 223");
-	bindInfo.AddDisplay(2, "think 123");
-	// 检测到触摸板设备
-	bindInfo.AddInputDevice(1, "mouse");
-	bindInfo.AddInputDevice(2, "keyboard");
-	bindInfo.AddInputDevice(3, "keyboard88");
-	
-	bindInfo.Store();
-	bindInfo.Load();
-	bindInfo.Dumps();
-	// 输入设备移除
-	bindInfo.RemoveInputDevice(1);
-	bindInfo.RemoveInputDevice(2);
-	// 触摸板设备移除
-	bindInfo.RemoveDisplay(2);
-	bindInfo.RemoveDisplay(0);
+    InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
+    // 多模初始化
+    bindInfo.Load();
+    // 检测到触摸板设备
+    bindInfo.AddInputDevice(1, "mouse");
+    bindInfo.AddInputDevice(2, "keyboard");
+    // 窗口同步信息
+    bindInfo.AddDisplay(0, "hp 223");
+    bindInfo.AddDisplay(2, "think 123");
+    // 显示屏移除
+    bindInfo.RemoveDisplay(2);
+    bindInfo.RemoveDisplay(0);
+    // 输入设备移除
+    bindInfo.RemoveInputDevice(1);
+    bindInfo.RemoveInputDevice(2);
+    bindInfo.RemoveInputDevice(3);
+    // 窗口同步信息
+    bindInfo.AddDisplay(0, "hp 223");
+    bindInfo.AddDisplay(2, "think 123");
+    // 检测到触摸板设备
+    bindInfo.AddInputDevice(1, "mouse");
+    bindInfo.AddInputDevice(2, "keyboard");
+    bindInfo.AddInputDevice(3, "keyboard88");
+
+    bindInfo.Store();
+    bindInfo.Load();
+    bindInfo.Dumps();
+    // 输入设备移除
+    bindInfo.RemoveInputDevice(1);
+    bindInfo.RemoveInputDevice(2);
+    // 触摸板设备移除
+    bindInfo.RemoveDisplay(2);
+    bindInfo.RemoveDisplay(0);
     ASSERT_EQ(bindInfo.Dumps(), std::string(""));
 }
 
@@ -165,15 +168,15 @@ HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_004, TestSize.Le
 HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_GetBindDisplayNameByInputDevice_005, TestSize.Level1)
 {
     InputDisplayBindHelperTest::WriteConfigFile("mouse<=>think 123\nkeyboard<=>hp 223\n");
-	InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
-	// 多模初始化
-	bindInfo.Load();
-	// 检测到触摸板设备
-	bindInfo.AddInputDevice(1, "mouse");
-	bindInfo.AddInputDevice(2, "keyboard");
-	// 窗口同步信息
-	bindInfo.AddDisplay(0, "hp 223");
-	bindInfo.AddDisplay(2, "think 123");
+    InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
+    // 多模初始化
+    bindInfo.Load();
+    // 检测到触摸板设备
+    bindInfo.AddInputDevice(1, "mouse");
+    bindInfo.AddInputDevice(2, "keyboard");
+    // 窗口同步信息
+    bindInfo.AddDisplay(0, "hp 223");
+    bindInfo.AddDisplay(2, "think 123");
     ASSERT_EQ(bindInfo.Dumps(), std::string("mouse<=>think 123\nkeyboard<=>hp 223\n"));
     // 获取
     ASSERT_EQ(bindInfo.GetBindDisplayNameByInputDevice(1), std::string("think 123"));
@@ -197,22 +200,22 @@ HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_GetBindDisplayNa
 HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_IsDisplayAdd_006, TestSize.Level1)
 {
     InputDisplayBindHelperTest::WriteConfigFile("mouse<=>think 123\nkeyboard<=>hp 223\n");
-	InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
-	// 多模初始化
-	bindInfo.Load();
+    InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
+    // 多模初始化
+    bindInfo.Load();
     ASSERT_FALSE(bindInfo.IsDisplayAdd(0, "hp 223"));
     ASSERT_FALSE(bindInfo.IsDisplayAdd(2, "think 123"));
     ASSERT_FALSE(bindInfo.IsDisplayAdd(1, "think 123"));
-	// 窗口同步信息
-	bindInfo.AddDisplay(0, "hp 223");
-	bindInfo.AddDisplay(2, "think 123");
+    // 窗口同步信息
+    bindInfo.AddDisplay(0, "hp 223");
+    bindInfo.AddDisplay(2, "think 123");
     ASSERT_EQ(bindInfo.Dumps(), std::string());
     ASSERT_TRUE(bindInfo.IsDisplayAdd(0, "hp 223"));
     ASSERT_TRUE(bindInfo.IsDisplayAdd(2, "think 123"));
     ASSERT_FALSE(bindInfo.IsDisplayAdd(1, "think 123"));
     // 检测到触摸板设备
-	bindInfo.AddInputDevice(1, "mouse");
-	bindInfo.AddInputDevice(2, "keyboard");
+    bindInfo.AddInputDevice(1, "mouse");
+    bindInfo.AddInputDevice(2, "keyboard");
     ASSERT_EQ(bindInfo.Dumps(), std::string("mouse<=>think 123\nkeyboard<=>hp 223\n"));
 }
 
@@ -224,27 +227,27 @@ HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_IsDisplayAdd_006
  */
 HWTEST_F(InputDisplayBindHelperTest, InputDisplayBindHelperTest_GetDisplayIdNames_007, TestSize.Level1)
 {
-	using IdNames = std::set<std::pair<int32_t, std::string>>;
+    using IdNames = std::set<std::pair<int32_t, std::string>>;
     InputDisplayBindHelperTest::WriteConfigFile("mouse<=>think 123\nkeyboard<=>hp 223\n");
-	InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
-	// 多模初始化
-	bindInfo.Load();
-	IdNames idNames;
-	ASSERT_EQ(bindInfo.GetDisplayIdNames(), idNames);
-	// 窗口同步信息
-	bindInfo.AddDisplay(0, "hp 223");
-	idNames.insert(std::make_pair(0, "hp 223"));
-	ASSERT_EQ(bindInfo.GetDisplayIdNames(), idNames);
-	bindInfo.AddDisplay(2, "think 123");
-	idNames.insert(std::make_pair(2, "think 123"));
-	ASSERT_EQ(bindInfo.GetDisplayIdNames(), idNames);
+    InputDisplayBindHelper bindInfo(InputDisplayBindHelperTest::GetCfgFileName());
+    // 多模初始化
+    bindInfo.Load();
+    IdNames idNames;
+    ASSERT_EQ(bindInfo.GetDisplayIdNames(), idNames);
+    // 窗口同步信息
+    bindInfo.AddDisplay(0, "hp 223");
+    idNames.insert(std::make_pair(0, "hp 223"));
+    ASSERT_EQ(bindInfo.GetDisplayIdNames(), idNames);
+    bindInfo.AddDisplay(2, "think 123");
+    idNames.insert(std::make_pair(2, "think 123"));
+    ASSERT_EQ(bindInfo.GetDisplayIdNames(), idNames);
     ASSERT_EQ(bindInfo.Dumps(), std::string());
     // 检测到触摸板设备
-	bindInfo.AddInputDevice(1, "mouse");
-	bindInfo.AddInputDevice(2, "keyboard");
-	idNames.insert(std::make_pair(2, "think 123"));
-	ASSERT_EQ(bindInfo.GetDisplayIdNames(), idNames);
+    bindInfo.AddInputDevice(1, "mouse");
+    bindInfo.AddInputDevice(2, "keyboard");
+    idNames.insert(std::make_pair(2, "think 123"));
+    ASSERT_EQ(bindInfo.GetDisplayIdNames(), idNames);
     ASSERT_EQ(bindInfo.Dumps(), std::string("mouse<=>think 123\nkeyboard<=>hp 223\n"));
 }
-} //namespace MMI
+} // namespace MMI
 } // namespace OHOS
\ No newline at end of file
