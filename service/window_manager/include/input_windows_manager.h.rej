diff a/service/window_manager/include/input_windows_manager.h b/service/window_manager/include/input_windows_manager.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -35,15 +35,16 @@
 namespace OHOS {
 namespace MMI {
 struct MouseLocation {
-    int32_t physicalX { 0 };
-    int32_t physicalY { 0 };
+    int32_t physicalX{ 0 };
+    int32_t physicalY{ 0 };
 };
 
 class InputWindowsManager final {
     DECLARE_DELAYED_SINGLETON(InputWindowsManager);
+
 public:
     DISALLOW_COPY_AND_MOVE(InputWindowsManager);
-    void Init(UDSServer& udsServer);
+    void Init(UDSServer &udsServer);
     int32_t GetClientFd(std::shared_ptr<PointerEvent> pointerEvent);
 #ifdef OHOS_BUILD_ENABLE_KEYBOARD
     int32_t GetPidAndUpdateTarget(std::shared_ptr<InputEvent> inputEvent);
@@ -54,27 +55,27 @@ public:
     void UpdateDisplayInfo(const DisplayGroupInfo &displayGroupInfo);
 #ifdef OHOS_BUILD_ENABLE_POINTER
     MouseLocation GetMouseInfo();
-    void UpdateAndAdjustMouseLocation(int32_t& displayId, double& x, double& y);
-#endif //OHOS_BUILD_ENABLE_POINTER
+    void UpdateAndAdjustMouseLocation(int32_t &displayId, double &x, double &y);
+#endif // OHOS_BUILD_ENABLE_POINTER
 #ifdef OHOS_BUILD_ENABLE_TOUCH
-    void AdjustDisplayCoordinate(const DisplayInfo& displayInfo, int32_t& physicalX, int32_t& physicalY) const;
+    void AdjustDisplayCoordinate(const DisplayInfo &displayInfo, int32_t &physicalX, int32_t &physicalY) const;
 #endif // OHOS_BUILD_ENABLE_TOUCH
 #if defined(OHOS_BUILD_ENABLE_POINTER) || defined(OHOS_BUILD_ENABLE_TOUCH)
-    bool UpdateDisplayId(int32_t& displayId);
+    bool UpdateDisplayId(int32_t &displayId);
 #endif // OHOS_BUILD_ENABLE_POINTER || OHOS_BUILD_ENABLE_TOUCH
 #if defined(OHOS_BUILD_ENABLE_POINTER) || defined(OHOS_BUILD_ENABLE_TOUCH)
     int32_t UpdateTargetPointer(std::shared_ptr<PointerEvent> pointerEvent);
 #endif // OHOS_BUILD_ENABLE_POINTER || OHOS_BUILD_ENABLE_TOUCH
 #ifdef OHOS_BUILD_ENABLE_TOUCH
-    bool TouchPointToDisplayPoint(int32_t deviceId, struct libinput_event_touch* touch,
-        EventTouch& touchInfo, int32_t& targetDisplayId);
-    void RotateTouchScreen(DisplayInfo info, LogicalCoordinate& coord) const;
-    bool TransformTipPoint(struct libinput_event_tablet_tool* tip, LogicalCoordinate& coord, int32_t& displayId) const;
-    bool CalculateTipPoint(struct libinput_event_tablet_tool* tip,
-        int32_t& targetDisplayId, LogicalCoordinate& coord) const;
+    bool TouchPointToDisplayPoint(int32_t deviceId, struct libinput_event_touch *touch, EventTouch &touchInfo,
+        int32_t &targetDisplayId);
+    void RotateTouchScreen(DisplayInfo info, LogicalCoordinate &coord) const;
+    bool TransformTipPoint(struct libinput_event_tablet_tool *tip, LogicalCoordinate &coord, int32_t &displayId) const;
+    bool CalculateTipPoint(struct libinput_event_tablet_tool *tip, int32_t &targetDisplayId,
+        LogicalCoordinate &coord) const;
 #endif // OHOS_BUILD_ENABLE_TOUCH
 #ifdef OHOS_BUILD_ENABLE_POINTER
-    const DisplayGroupInfo& GetDisplayGroupInfo();
+    const DisplayGroupInfo &GetDisplayGroupInfo();
     int32_t SetHoverScrollState(bool state);
     bool GetHoverScrollState() const;
     int32_t SetPointerStyle(int32_t pid, int32_t windowId, PointerStyle pointerStyle);
@@ -84,7 +85,7 @@ public:
 #endif // OHOS_BUILD_ENABLE_POINTER_DRAWING
 #endif // OHOS_BUILD_ENABLE_POINTER
     void Dump(int32_t fd, const std::vector<std::string> &args);
-    int32_t GetWindowPid(int32_t windowId, const DisplayGroupInfo& displayGroupInfo) const;
+    int32_t GetWindowPid(int32_t windowId, const DisplayGroupInfo &displayGroupInfo) const;
     int32_t GetWindowPid(int32_t windowId) const;
 #ifdef OHOS_BUILD_ENABLE_POINTER
     void DispatchPointer(int32_t pointerAction);
@@ -95,9 +96,10 @@ public:
     void DeviceStatusChanged(int32_t deviceId, const std::string &sysUid, const std::string devStatus);
     int32_t GetDisplayBindInfo(DisplayBindInfos &infos);
     int32_t SetDisplayBind(int32_t deviceId, int32_t displayId, std::string &msg);
-    int32_t AppendExtraData(const ExtraData& extraData);
+    int32_t AppendExtraData(const ExtraData &extraData);
     bool IsWindowVisible(int32_t pid);
     void ClearExtraData();
+
 private:
 #if defined(OHOS_BUILD_ENABLE_POINTER) || defined(OHOS_BUILD_ENABLE_TOUCH)
     bool IsInHotArea(int32_t x, int32_t y, const std::vector<Rect> &rects) const;
@@ -105,8 +107,8 @@ private:
     void PrintDisplayInfo();
 #ifdef OHOS_BUILD_ENABLE_POINTER
     int32_t UpdateMouseTarget(std::shared_ptr<PointerEvent> pointerEvent);
-    void UpdatePointerEvent(int32_t logicalX, int32_t logicalY,
-        const std::shared_ptr<PointerEvent>& pointerEvent, const WindowInfo& touchWindow);
+    void UpdatePointerEvent(int32_t logicalX, int32_t logicalY, const std::shared_ptr<PointerEvent> &pointerEvent,
+        const WindowInfo &touchWindow);
     void NotifyPointerToWindow();
     void OnSessionLost(SessionPtr session);
     void UpdatePointerStyle();
@@ -116,64 +118,64 @@ private:
 #endif // OHOS_BUILD_ENABLE_JOYSTICK
 #ifdef OHOS_BUILD_ENABLE_TOUCH
     int32_t UpdateTouchScreenTarget(std::shared_ptr<PointerEvent> pointerEvent);
-    void PullEnterLeaveEvent(int32_t logicalX, int32_t logicalY,
-        const std::shared_ptr<PointerEvent> pointerEvent, const WindowInfo* touchWindow);
+    void PullEnterLeaveEvent(int32_t logicalX, int32_t logicalY, const std::shared_ptr<PointerEvent> pointerEvent,
+        const WindowInfo *touchWindow);
     void DispatchTouch(int32_t pointerAction);
 #endif // OHOS_BUILD_ENABLE_TOUCH
 #ifdef OHOS_BUILD_ENABLE_POINTER
     int32_t UpdateTouchPadTarget(std::shared_ptr<PointerEvent> pointerEvent);
 #endif // OHOS_BUILD_ENABLE_POINTER
 #if defined(OHOS_BUILD_ENABLE_POINTER) || defined(OHOS_BUILD_ENABLE_TOUCH)
-    const DisplayInfo* GetPhysicalDisplay(int32_t id) const;
+    const DisplayInfo *GetPhysicalDisplay(int32_t id) const;
 #endif // OHOS_BUILD_ENABLE_POINTER || OHOS_BUILD_ENABLE_TOUCH
 #ifdef OHOS_BUILD_ENABLE_TOUCH
-    const DisplayInfo* FindPhysicalDisplayInfo(const std::string& uniq) const;
+    const DisplayInfo *FindPhysicalDisplayInfo(const std::string &uniq) const;
 #endif // OHOS_BUILD_ENABLE_TOUCH
     int32_t GetDisplayId(std::shared_ptr<InputEvent> inputEvent) const;
 #ifdef OHOS_BUILD_ENABLE_POINTER
     std::optional<WindowInfo> SelectWindowInfo(int32_t logicalX, int32_t logicalY,
-        const std::shared_ptr<PointerEvent>& pointerEvent);
+        const std::shared_ptr<PointerEvent> &pointerEvent);
     std::optional<WindowInfo> GetWindowInfo(int32_t logicalX, int32_t logicalY);
 #endif // OHOS_BUILD_ENABLE_POINTER
 #ifdef OHOS_BUILD_ENABLE_TOUCH
-    void GetPhysicalDisplayCoord(struct libinput_event_touch* touch,
-        const DisplayInfo& info, EventTouch& touchInfo);
+    void GetPhysicalDisplayCoord(struct libinput_event_touch *touch, const DisplayInfo &info, EventTouch &touchInfo);
 #endif // OHOS_BUILD_ENABLE_TOUCH
 #ifdef OHOS_BUILD_ENABLE_POINTER
-    bool IsInsideDisplay(const DisplayInfo& displayInfo, int32_t physicalX, int32_t physicalY);
-    void FindPhysicalDisplay(const DisplayInfo& displayInfo, int32_t& physicalX,
-        int32_t& physicalY, int32_t& displayId);
+    bool IsInsideDisplay(const DisplayInfo &displayInfo, int32_t physicalX, int32_t physicalY);
+    void FindPhysicalDisplay(const DisplayInfo &displayInfo, int32_t &physicalX, int32_t &physicalY,
+        int32_t &displayId);
     void InitMouseDownInfo();
 #endif // OHOS_BUILD_ENABLE_POINTER
     void CheckFocusWindowChange(const DisplayGroupInfo &displayGroupInfo);
     void CheckZorderWindowChange(const DisplayGroupInfo &displayGroupInfo);
     void UpdateDisplayIdAndName();
     void UpdatePointerAction(std::shared_ptr<PointerEvent> pointerEvent);
+
 private:
-    UDSServer* udsServer_ { nullptr };
+    UDSServer *udsServer_{ nullptr };
 #ifdef OHOS_BUILD_ENABLE_POINTER
-    int32_t firstBtnDownWindowId_ { -1 };
-    int32_t lastLogicX_ { -1 };
-    int32_t lastLogicY_ { -1 };
+    int32_t firstBtnDownWindowId_{ -1 };
+    int32_t lastLogicX_{ -1 };
+    int32_t lastLogicY_{ -1 };
     WindowInfo lastWindowInfo_;
-    std::shared_ptr<PointerEvent> lastPointerEvent_ { nullptr };
+    std::shared_ptr<PointerEvent> lastPointerEvent_{ nullptr };
     std::map<int32_t, std::map<int32_t, PointerStyle>> pointerStyle_;
     WindowInfo mouseDownInfo_;
     PointerStyle globalStyle_;
 #endif // OHOS_BUILD_ENABLE_POINTER
 #ifdef OHOS_BUILD_ENABLE_TOUCH
-    int32_t lastTouchLogicX_ { -1 };
-    int32_t lastTouchLogicY_ { -1 };
+    int32_t lastTouchLogicX_{ -1 };
+    int32_t lastTouchLogicY_{ -1 };
     WindowInfo lastTouchWindowInfo_;
-    std::shared_ptr<PointerEvent> lastTouchEvent_ { nullptr };
+    std::shared_ptr<PointerEvent> lastTouchEvent_{ nullptr };
 #endif // OHOS_BUILD_ENABLE_POINTER
     DisplayGroupInfo displayGroupInfo_;
     MouseLocation mouseLocation_ = { -1, -1 };
     std::map<int32_t, WindowInfo> touchItemDownInfos_;
     InputDisplayBindHelper bindInfo_;
     struct CaptureModeInfo {
-        int32_t windowId { -1 };
-        bool isCaptureMode { false };
+        int32_t windowId{ -1 };
+        bool isCaptureMode{ false };
     } captureModeInfo_;
     ExtraData extraData_;
 };
