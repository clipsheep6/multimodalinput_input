diff a/service/window_manager/include/pointer_drawing_manager.h b/service/window_manager/include/pointer_drawing_manager.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -34,8 +34,8 @@
 namespace OHOS {
 namespace MMI {
 class PointerDrawingManager final : public IPointerDrawingManager,
-                                    public IDeviceObserver,
-                                    public std::enable_shared_from_this<PointerDrawingManager> {
+    public IDeviceObserver,
+    public std::enable_shared_from_this<PointerDrawingManager> {
 public:
     int32_t IMAGE_WIDTH = 64;
     int32_t IMAGE_HEIGHT = 64;
@@ -46,8 +46,8 @@ public:
     ~PointerDrawingManager() override = default;
     void DrawPointer(int32_t displayId, int32_t physicalX, int32_t physicalY,
         const MOUSE_ICON mouseStyle = MOUSE_ICON::DEFAULT) override;
-    void UpdateDisplayInfo(const DisplayInfo& displayInfo) override;
-    void OnDisplayInfo(const DisplayGroupInfo& displayGroupInfo) override;
+    void UpdateDisplayInfo(const DisplayInfo &displayInfo) override;
+    void OnDisplayInfo(const DisplayGroupInfo &displayGroupInfo) override;
     void OnWindowInfo(const WinInfo &info) override;
     void UpdatePointerDevice(bool hasPointerDevice, bool isPointerVisible) override;
     bool Init() override;
@@ -61,12 +61,13 @@ public:
     void AdjustMouseFocus(ICON_TYPE iconType, int32_t &physicalX, int32_t &physicalY);
     void SetMouseDisplayState(bool state) override;
     bool GetMouseDisplayState() const override;
+
 private:
     void CreatePointerWindow(int32_t displayId, int32_t physicalX, int32_t physicalY);
     sptr<OHOS::Surface> GetLayer();
     sptr<OHOS::SurfaceBuffer> GetSurfaceBuffer(sptr<OHOS::Surface> layer) const;
     void DoDraw(uint8_t *addr, uint32_t width, uint32_t height, const MOUSE_ICON mouseStyle = MOUSE_ICON::DEFAULT);
-    void DrawPixelmap(OHOS::Rosen::Drawing::Canvas &canvas, const std::string& iconPath);
+    void DrawPixelmap(OHOS::Rosen::Drawing::Canvas &canvas, const std::string &iconPath);
     void DrawManager();
     void FixCursorPosition(int32_t &physicalX, int32_t &physicalY);
     std::unique_ptr<OHOS::Media::PixelMap> DecodeImageToPixelMap(const std::string &imagePath);
@@ -76,23 +77,23 @@ private:
 
 private:
     struct PidInfo {
-        int32_t pid { 0 };
-        bool visible { false };
+        int32_t pid{ 0 };
+        bool visible{ false };
     };
-    sptr<OHOS::Rosen::Window> pointerWindow_ { nullptr };
-    bool hasDisplay_ { false };
-    DisplayInfo displayInfo_ {};
-    bool hasPointerDevice_ { false };
-    int32_t lastPhysicalX_ { -1 };
-    int32_t lastPhysicalY_ { -1 };
-    PointerStyle lastMouseStyle_ {};
-    int32_t pid_ { 0 };
-    int32_t windowId_ { 0 };
-    int32_t imageWidth_ { 0 };
-    int32_t imageHeight_ { 0 };
+    sptr<OHOS::Rosen::Window> pointerWindow_{ nullptr };
+    bool hasDisplay_{ false };
+    DisplayInfo displayInfo_{};
+    bool hasPointerDevice_{ false };
+    int32_t lastPhysicalX_{ -1 };
+    int32_t lastPhysicalY_{ -1 };
+    PointerStyle lastMouseStyle_{};
+    int32_t pid_{ 0 };
+    int32_t windowId_{ 0 };
+    int32_t imageWidth_{ 0 };
+    int32_t imageHeight_{ 0 };
     std::map<MOUSE_ICON, IconStyle> mouseIcons_;
     std::list<PidInfo> pidInfos_;
-    bool mouseDisplayState_ { false };
+    bool mouseDisplayState_{ false };
 };
 } // namespace MMI
 } // namespace OHOS
