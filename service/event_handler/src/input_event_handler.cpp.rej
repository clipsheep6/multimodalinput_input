diff a/service/event_handler/src/input_event_handler.cpp b/service/event_handler/src/input_event_handler.cpp	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -42,7 +42,7 @@ InputEventHandler::InputEventHandler()
 
 InputEventHandler::~InputEventHandler() {}
 
-void InputEventHandler::Init(UDSServer& udsServer)
+void InputEventHandler::Init(UDSServer &udsServer)
 {
     udsServer_ = &udsServer;
     BuildInputHandlerChain();
@@ -63,13 +63,14 @@ void InputEventHandler::OnEvent(void *event)
     int32_t eventType = libinput_event_get_type(lpEvent);
     int64_t beginTime = GetSysClockTime();
     MMI_HILOGD("Event reporting. id:%{public}" PRId64 ",tid:%{public}" PRId64 ",eventType:%{public}d,"
-               "beginTime:%{public}" PRId64, idSeed_, GetThisThreadId(), eventType, beginTime);
+        "beginTime:%{public}" PRId64,
+        idSeed_, GetThisThreadId(), eventType, beginTime);
     CHKPV(eventNormalizeHandler_);
     eventNormalizeHandler_->HandleEvent(lpEvent);
     int64_t endTime = GetSysClockTime();
     int64_t lostTime = endTime - beginTime;
-    MMI_HILOGD("Event handling completed. id:%{public}" PRId64 ",endTime:%{public}" PRId64
-               ",lostTime:%{public}" PRId64, idSeed_, endTime, lostTime);
+    MMI_HILOGD("Event handling completed. id:%{public}" PRId64 ",endTime:%{public}" PRId64 ",lostTime:%{public}" PRId64,
+        idSeed_, endTime, lostTime);
 }
 
 int32_t InputEventHandler::BuildInputHandlerChain()
@@ -87,7 +88,7 @@ int32_t InputEventHandler::BuildInputHandlerChain()
 #endif // OHOS_BUILD_ENABLE_POINTER || OHOS_BUILD_ENABLE_TOUCH
 
 #ifdef OHOS_BUILD_ENABLE_INTERCEPTOR
-    eventInterceptorHandler_  = std::make_shared<EventInterceptorHandler>();
+    eventInterceptorHandler_ = std::make_shared<EventInterceptorHandler>();
     handler->SetNext(eventInterceptorHandler_);
     handler = eventInterceptorHandler_;
 #endif // OHOS_BUILD_ENABLE_INTERCEPTOR
@@ -117,7 +118,7 @@ int32_t InputEventHandler::BuildInputHandlerChain()
     return RET_OK;
 }
 
-UDSServer* InputEventHandler::GetUDSServer() const
+UDSServer *InputEventHandler::GetUDSServer() const
 {
     return udsServer_;
 }
