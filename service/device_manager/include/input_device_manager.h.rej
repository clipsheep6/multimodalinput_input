diff a/service/device_manager/include/input_device_manager.h b/service/device_manager/include/input_device_manager.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -34,16 +34,17 @@ class InputDeviceManager final : public IDeviceObject {
     DECLARE_DELAYED_SINGLETON(InputDeviceManager);
 
     struct InputDeviceInfo {
-        struct libinput_device *inputDeviceOrigin { nullptr };
+        struct libinput_device *inputDeviceOrigin{ nullptr };
         std::string networkIdOrigin;
-        bool isRemote { false };
-        bool isPointerDevice { false };
-        bool isTouchableDevice { false };
-        bool enable { false };
+        bool isRemote{ false };
+        bool isPointerDevice{ false };
+        bool isTouchableDevice{ false };
+        bool enable{ false };
         std::string dhid;
         std::string sysUid;
         VendorConfig vendorConfig;
     };
+
 public:
     DISALLOW_COPY_AND_MOVE(InputDeviceManager);
     void OnInputDeviceAdded(struct libinput_device *inputDevice);
@@ -51,7 +52,7 @@ public:
     std::vector<int32_t> GetInputDeviceIds() const;
     std::shared_ptr<InputDevice> GetInputDevice(int32_t id, bool checked = true) const;
     int32_t SupportKeys(int32_t deviceId, std::vector<int32_t> &keyCodes, std::vector<bool> &keystroke);
-    int32_t FindInputDeviceId(struct libinput_device* inputDevice);
+    int32_t FindInputDeviceId(struct libinput_device *inputDevice);
     int32_t GetKeyboardBusMode(int32_t deviceId);
     bool GetDeviceConfig(int32_t deviceId, int32_t &KeyboardType);
     int32_t GetDeviceSupportKey(int32_t deviceId, int32_t &keyboardType);
@@ -59,21 +60,21 @@ public:
     void Attach(std::shared_ptr<IDeviceObserver> observer);
     void Detach(std::shared_ptr<IDeviceObserver> observer);
     void NotifyPointerDevice(bool hasPointerDevice, bool isVisible);
-    void AddDevListener(SessionPtr sess, std::function<void(int32_t, const std::string&)> callback);
+    void AddDevListener(SessionPtr sess, std::function<void(int32_t, const std::string &)> callback);
     void RemoveDevListener(SessionPtr sess);
     void Dump(int32_t fd, const std::vector<std::string> &args);
     void DumpDeviceList(int32_t fd, const std::vector<std::string> &args);
     bool IsRemote(struct libinput_device *inputDevice) const;
     bool IsRemote(int32_t id) const;
-    bool IsKeyboardDevice(struct libinput_device* device) const;
-    bool IsPointerDevice(struct libinput_device* device) const;
-    bool IsTouchDevice(struct libinput_device* device) const;
-    struct libinput_device* GetKeyboardDevice() const;
+    bool IsKeyboardDevice(struct libinput_device *device) const;
+    bool IsPointerDevice(struct libinput_device *device) const;
+    bool IsTouchDevice(struct libinput_device *device) const;
+    struct libinput_device *GetKeyboardDevice() const;
 #ifdef OHOS_BUILD_ENABLE_POINTER_DRAWING
     bool HasPointerDevice();
 #endif // OHOS_BUILD_ENABLE_POINTER_DRAWING
     bool HasTouchDevice();
-    const std::string& GetScreenId(int32_t deviceId) const;
+    const std::string &GetScreenId(int32_t deviceId) const;
     using inputDeviceCallback = std::function<void(int32_t deviceId, std::string devName, std::string devStatus)>;
     void SetInputStatusChangeCallback(inputDeviceCallback callback);
     VendorConfig GetVendorConfig(int32_t deviceId) const;
@@ -81,16 +82,17 @@ public:
 
 private:
     int32_t ParseDeviceId(const std::string &sysName);
-    void MakeDeviceInfo(struct libinput_device *inputDevice, struct InputDeviceInfo& info);
-    bool IsMatchKeys(struct libinput_device* device, const std::vector<int32_t> &keyCodes) const;
+    void MakeDeviceInfo(struct libinput_device *inputDevice, struct InputDeviceInfo &info);
+    bool IsMatchKeys(struct libinput_device *device, const std::vector<int32_t> &keyCodes) const;
     void ScanPointerDevice();
-    std::string GetInputIdentification(struct libinput_device* inputDevice);
-    void NotifyDevCallback(int32_t deviceId,  struct InputDeviceInfo inDevice);
+    std::string GetInputIdentification(struct libinput_device *inputDevice);
+    void NotifyDevCallback(int32_t deviceId, struct InputDeviceInfo inDevice);
+
 private:
     std::map<int32_t, struct InputDeviceInfo> inputDevice_;
     std::map<std::string, std::string> inputDeviceScreens_;
     std::list<std::shared_ptr<IDeviceObserver>> observers_;
-    std::map<SessionPtr, std::function<void(int32_t, const std::string&)>> devListener_;
+    std::map<SessionPtr, std::function<void(int32_t, const std::string &)>> devListener_;
     inputDeviceCallback devCallbacks_ = { nullptr };
     std::map<int32_t, std::string> displayInputBindInfos_;
     DeviceConfigManagement configManagement_;
