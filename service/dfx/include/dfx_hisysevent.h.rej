diff a/service/dfx/include/dfx_hisysevent.h b/service/dfx/include/dfx_hisysevent.h	(rejected hunks)
@@ -4,7 +4,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -46,26 +46,25 @@ public:
         uint32_t above50msTimes;
     };
     struct ClientConnectData {
-        int32_t pid { -1 };
-        int32_t uid { -1 };
-        int32_t moduleType { -1 };
+        int32_t pid{ -1 };
+        int32_t uid{ -1 };
+        int32_t moduleType{ -1 };
         std::string programName;
-        int32_t serverFd { -1 };
+        int32_t serverFd{ -1 };
     };
     static void OnDeviceConnect(int32_t id, OHOS::HiviewDFX::HiSysEvent::EventType type);
     static void OnDeviceDisconnect(int32_t id, OHOS::HiviewDFX::HiSysEvent::EventType type);
     static void OnClientConnect(const ClientConnectData &data, OHOS::HiviewDFX::HiSysEvent::EventType type);
-    static void OnClientDisconnect(const SessionPtr& secPtr, int32_t fd,
-        OHOS::HiviewDFX::HiSysEvent::EventType type);
+    static void OnClientDisconnect(const SessionPtr &secPtr, int32_t fd, OHOS::HiviewDFX::HiSysEvent::EventType type);
     static void OnUpdateTargetPointer(std::shared_ptr<PointerEvent> pointer, int32_t fd,
         OHOS::HiviewDFX::HiSysEvent::EventType type);
     static void OnUpdateTargetKey(std::shared_ptr<KeyEvent> key, int32_t fd,
         OHOS::HiviewDFX::HiSysEvent::EventType type);
-    static void OnFocusWindowChanged(int32_t oldFocusWindowId, int32_t newFocusWindowId,
-        int32_t oldFocusWindowPid, int32_t newFocusWindowPid);
+    static void OnFocusWindowChanged(int32_t oldFocusWindowId, int32_t newFocusWindowId, int32_t oldFocusWindowPid,
+        int32_t newFocusWindowPid);
     static void OnZorderWindowChanged(int32_t oldZorderFirstWindowId, int32_t newZorderFirstWindowId,
         int32_t oldZorderFirstWindowPid, int32_t newZorderFirstWindowPid);
-    static void ApplicationBlockInput(const SessionPtr& sess);
+    static void ApplicationBlockInput(const SessionPtr &sess);
     static void CalcKeyDispTimes();
     static void CalcPointerDispTimes();
     static void CalcComboStartTimes(int32_t keyDownDuration);
@@ -80,11 +79,12 @@ public:
     {
         dispatchStartTime_ = GetSysClockTime();
     }
+
 private:
-    static inline int64_t dispatchStartTime_ { 0 };
-    static inline int64_t comboStartTime_ { 0 };
-    static inline DispCastTime dispCastTime_ { 0 };
-    static inline ComboStartCastTime comboStartCastTime_ { 0 };
+    static inline int64_t dispatchStartTime_{ 0 };
+    static inline int64_t comboStartTime_{ 0 };
+    static inline DispCastTime dispCastTime_{ 0 };
+    static inline ComboStartCastTime comboStartCastTime_{ 0 };
 };
 } // namespace MMI
 } // namespace OHOS
