Copyright (C) 2021 Huawei Device Co., Ltd.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

diff -Naur old/BUILD.gn new/BUILD.gn
--- old/BUILD.gn	2021-01-01 00:00:00.000000000 +0800
+++ new/BUILD.gn	2021-01-01 00:00:00.000000000 +0800
@@ -23,7 +23,7 @@
   ]
 }
 
-ohos_shared_library("libmtdev") {
+ohos_shared_library("libmtdev-hdf") {
   sources = [
     "src/caps.c",
     "src/core.c",
diff -Naur old/include/mtdev.h new/include/mtdev.h
--- old/include/mtdev.h	2021-01-01 00:00:00.000000000 +0800
+++ new/include/mtdev.h	2021-01-01 00:00:00.000000000 +0800
@@ -77,6 +77,21 @@
 #define MT_ID_MIN	0
 #define MT_ID_MAX	65535
 
+typedef int (*mtdev_ioctl)(int hdiindex,int cmd, void * iobuff);
+
+/**
+ * mtdev_new_open - create and open a new mtdev
+ * @fd: file descriptor of the kernel device
+ *
+ * Create a new mtdev and open the conversion.
+ *
+ * Returns zero in case of failure.
+ *
+ * This call combines the plumbing functions mtdev_new() and
+ * mtdev_open().
+ */
+struct mtdev *mtdev_new_open_hdi(int fd,mtdev_ioctl func);
+
 /**
  * mtdev_new_open - create and open a new mtdev
  * @fd: file descriptor of the kernel device
diff -Naur old/src/caps.c new/src/caps.c
--- old/src/caps.c	2021-01-01 00:00:00.000000000 +0800
+++ new/src/caps.c	2021-01-01 00:00:00.000000000 +0800
@@ -35,6 +35,8 @@
 #define LONG_BITS (sizeof(long) * 8)
 #define NLONGS(x) (((x) + LONG_BITS - 1) / LONG_BITS)
 
+typedef int (*mtdev_ioctl)(int hdiindex,int cmd, void * iobuff);
+
 static inline int getbit(const unsigned long *map, int key)
 {
 	return (map[key / LONG_BITS] >> (key % LONG_BITS)) & 0x01;
@@ -47,6 +49,13 @@
 	return rc >= 0;
 }
 
+static int hdigetabs(struct input_absinfo *abs, int key, int fd,mtdev_ioctl func)
+{
+	int rc;
+	rc = func(fd, EVIOCGABS(key), abs);
+	return rc >= 0;
+}
+
 static struct input_absinfo *get_info(struct mtdev *dev, int code)
 {
 	int ix;
@@ -70,6 +79,13 @@
 	mtdev_set_mt_event(dev, code, has);
 }
 
+static void hdiset_info(struct mtdev *dev, int code,
+						  const unsigned long *bits, int fd,mtdev_ioctl func)
+{
+		int has = getbit(bits, code) && hdigetabs(get_info(dev, code), code, fd,func);
+		mtdev_set_mt_event(dev, code, has);
+}
+
 static void default_fuzz(struct mtdev *dev, int code, int sn)
 {
 	struct input_absinfo *abs = get_info(dev, code);
@@ -78,6 +94,29 @@
 	abs->fuzz = (abs->maximum - abs->minimum) / sn;
 }
 
+static int hdimtdev_set_slots(struct mtdev *dev, int fd,mtdev_ioctl func)
+{
+	struct { unsigned code; int values[DIM_FINGER]; } req;
+	struct mtdev_state *state = dev->state;
+	int rc, i, s, nslot;
+
+	nslot = mtdev_get_abs_maximum(dev, ABS_MT_SLOT) + 1;
+
+	for (i = 0; i < MT_ABS_SIZE; i++) {
+		req.code = mtdev_mt2abs(i);
+		if (!mtdev_has_mt_event(dev, req.code))
+			continue;
+		rc = func(fd, EVIOCGMTSLOTS(sizeof(req)), &req);
+		if (rc < 0)
+			return rc;
+		for (s = 0; s < DIM_FINGER && s < nslot; s++)
+			set_sval(&state->data[s], i, req.values[s]);
+	}
+
+	return 0;
+}
+
+
 static int mtdev_set_slots(struct mtdev *dev, int fd)
 {
 	struct { unsigned code; int values[DIM_FINGER]; } req;
@@ -99,6 +138,48 @@
 
 	return 0;
 }
+
+int mtdev_configure_hdi(struct mtdev *dev, int fd,mtdev_ioctl func)
+{
+	unsigned long absbits[NLONGS(ABS_MAX)];
+	int rc, i;
+
+	rc = func(fd, EVIOCGBIT(EV_ABS, sizeof(absbits)), absbits);
+	if (rc < 0)
+		return rc;
+
+	hdiset_info(dev, ABS_MT_SLOT, absbits, fd,func);
+	for (i = 0; i < MT_ABS_SIZE; i++)
+		hdiset_info(dev, mtdev_mt2abs(i), absbits, fd,func);
+
+	dev->has_mtdata = mtdev_has_mt_event(dev, ABS_MT_POSITION_X) &&
+		mtdev_has_mt_event(dev, ABS_MT_POSITION_Y);
+
+	if (!mtdev_has_mt_event(dev, ABS_MT_POSITION_X))
+		hdigetabs(get_info(dev, ABS_MT_POSITION_X), ABS_X, fd,func);
+	if (!mtdev_has_mt_event(dev, ABS_MT_POSITION_Y))
+		hdigetabs(get_info(dev, ABS_MT_POSITION_Y), ABS_Y, fd,func);
+	if (!mtdev_has_mt_event(dev, ABS_MT_PRESSURE))
+		hdigetabs(get_info(dev, ABS_MT_PRESSURE), ABS_PRESSURE, fd,func);
+
+	if (!mtdev_has_mt_event(dev, ABS_MT_TRACKING_ID)) {
+		mtdev_set_abs_minimum(dev, ABS_MT_TRACKING_ID, MT_ID_MIN);
+		mtdev_set_abs_maximum(dev, ABS_MT_TRACKING_ID, MT_ID_MAX);
+	}
+
+	default_fuzz(dev, ABS_MT_POSITION_X, SN_COORD);
+	default_fuzz(dev, ABS_MT_POSITION_Y, SN_COORD);
+	default_fuzz(dev, ABS_MT_TOUCH_MAJOR, SN_WIDTH);
+	default_fuzz(dev, ABS_MT_TOUCH_MINOR, SN_WIDTH);
+	default_fuzz(dev, ABS_MT_WIDTH_MAJOR, SN_WIDTH);
+	default_fuzz(dev, ABS_MT_WIDTH_MINOR, SN_WIDTH);
+	default_fuzz(dev, ABS_MT_ORIENTATION, SN_ORIENT);
+
+	if (dev->has_slot)
+		hdimtdev_set_slots(dev, fd,func);
+
+	return 0;
+}
 
 int mtdev_configure(struct mtdev *dev, int fd)
 {
diff -Naur old/src/common.h new/src/common.h
--- old/src/common.h	2021-01-01 00:00:00.000000000 +0800
+++ new/src/common.h	2021-01-01 00:00:00.000000000 +0800
@@ -95,6 +95,8 @@
  */
 #define LEGACY_API_NUM_MT_AXES 11
 
+typedef int (*mtdev_ioctl)(int hdiindex,int cmd, void * iobuff);
+
 /**
  * struct mtdev - represents an input MT device
  * @has_mtdata: true if the device has MT capabilities
diff -Naur old/src/core.c new/src/core.c
--- old/src/core.c	2021-01-01 00:00:00.000000000 +0800
+++ new/src/core.c	2021-01-01 00:00:00.000000000 +0800
@@ -36,6 +36,8 @@
 #define input_event_usec time.tv_usec
 #endif
 
+typedef int (*mtdev_ioctl)(int hdiindex,int cmd, void * iobuff);
+
 static inline int istouch(const struct mtdev_slot *data,
 			  const struct mtdev *dev)
 {
@@ -382,6 +384,36 @@
 	return ret;
 }
 
+extern int mtdev_configure_hdi(struct mtdev *dev, int fd,mtdev_ioctl func);
+
+struct mtdev *mtdev_new_open_hdi(int fd,mtdev_ioctl func)
+{
+	struct mtdev *dev;
+	int ret;
+
+	dev = mtdev_new();
+	if (!dev)
+		return NULL;
+
+	if (!dev || fd < 0)
+		goto error;
+
+	ret = mtdev_init(dev);
+	if (ret)
+		goto error;
+	ret = mtdev_configure_hdi(dev, fd,func);
+	
+	if (ret)
+		goto error;
+
+	return dev;
+	
+error:
+	mtdev_close(dev);
+	mtdev_delete(dev);
+	return NULL;
+}
+
 struct mtdev *mtdev_new_open(int fd)
 {
 	struct mtdev *dev;
diff -Naur old/src/iobuf.c new/src/iobuf.c
--- old/src/iobuf.c	2021-01-01 00:00:00.000000000 +0800
+++ new/src/iobuf.c	2021-01-01 00:00:00.000000000 +0800
@@ -65,6 +65,17 @@
 	return evbuf_empty(&dev->state->outbuf);
 }
 
+int mtdev_count(struct mtdev *dev)
+{
+	return dev->state->outbuf.head - dev->state->outbuf.tail;
+}
+
+
+int mtdev_countin(struct mtdev *dev)
+{
+	return dev->state->inbuf.head - dev->state->inbuf.tail;
+}
+
 void mtdev_get_event(struct mtdev *dev, struct input_event* ev)
 {
 	evbuf_get(&dev->state->outbuf, ev);
