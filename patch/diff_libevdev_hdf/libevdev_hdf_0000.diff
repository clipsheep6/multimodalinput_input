Copyright (c) 2021-2022 Huawei Device Co., Ltd.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

diff -Naur old/BUILD.gn new/BUILD.gn
--- old/BUILD.gn	2021-01-01 00:00:00.000000000 +0800
+++ new/BUILD.gn	2021-01-01 00:00:00.000000000 +0800
@@ -24,7 +24,7 @@
   ]
 }

-ohos_shared_library("libevdev") {
+ohos_shared_library("libevdev-hdf") {
   sources = [
     "libevdev/libevdev-uinput.c",
     "libevdev/libevdev.c",
diff -Naur old/export_include/libevdev/libevdev.h new/export_include/libevdev/libevdev.h
--- old/export_include/libevdev/libevdev.h	2021-01-01 00:00:00.000000000 +0800
+++ new/export_include/libevdev/libevdev.h	2021-01-01 00:00:00.000000000 +0800
@@ -2359,6 +2359,10 @@
  */
 int libevdev_get_repeat(const struct libevdev *dev, int *delay, int *period);

+/* for hdf drv interface */
+typedef int (*libevdev_ioctl)(int hdiindex,int cmd, void * iobuff);
+int libevdev_new_from_index(int index, struct libevdev **dev,libevdev_ioctl func);
+
 /********* DEPRECATED SECTION *********/
 #if defined(__GNUC__) && __GNUC__ >= 4
 #define LIBEVDEV_DEPRECATED __attribute__ ((deprecated))
diff -Naur old/libevdev/libevdev-int.h new/libevdev/libevdev-int.h
--- old/libevdev/libevdev-int.h	2021-01-01 00:00:00.000000000 +0800
+++ new/libevdev/libevdev-int.h	2021-01-01 00:00:00.000000000 +0800
@@ -37,6 +37,8 @@
 #define ABS_MT_CNT (ABS_MT_MAX - ABS_MT_MIN + 1)
 #define LIBEVDEV_EXPORT __attribute__((visibility("default")))
 #define ALIAS(_to) __attribute__((alias(#_to)))
+/*for hdf drv interface*/
+typedef int (*libevdev_ioctl)(int hdiindex,int cmd, void * iobuff);

 /**
  * Sync state machine:
@@ -108,6 +110,7 @@
 	struct timeval last_event_time;

 	struct logdata log;
+	libevdev_ioctl fn;  //新增加数据必须放到结尾
 };

 #define log_msg_cond(dev, priority, ...) \
diff -Naur old/libevdev/libevdev-uinput.c new/libevdev/libevdev-uinput.c
--- old/libevdev/libevdev-uinput.c	2021-01-01 00:00:00.000000000 +0800
+++ new/libevdev/libevdev-uinput.c	2021-01-01 00:00:00.000000000 +0800
@@ -488,7 +488,12 @@
 #ifndef __MUSL__
 	struct input_event ev = { {0,0}, type, code, value };
 #else
-	struct input_event ev = { type, code, value };
+	struct input_event ev;
+	ev.input_event_sec = 0;
+	ev.input_event_usec = 0;
+	ev.type = type;
+	ev.code = code;
+	ev.value = value;
 #endif
 	int fd = libevdev_uinput_get_fd(uinput_dev);
 	int rc, max;
diff -Naur old/libevdev/libevdev.c new/libevdev/libevdev.c
--- old/libevdev/libevdev.c	2021-01-01 00:00:00.000000000 +0800
+++ new/libevdev/libevdev.c	2021-01-01 00:00:00.000000000 +0800
@@ -1401,8 +1401,8 @@
 	e.code = code;
 	e.value = value;

-	if (sanitize_event(dev, &e, SYNC_NONE) != EVENT_FILTER_NONE)
-		return -1;
+	// if (sanitize_event(dev, &e, SYNC_NONE) != EVENT_FILTER_NONE)
+		// return -1;

 	switch(type) {
 		case EV_ABS: rc = update_abs_state(dev, &e); break;
@@ -1885,3 +1885,205 @@

 	return ioctl(dev->fd, EVIOCSCLOCKID, &clockid) ? -errno : 0;
 }
+
+LIBEVDEV_EXPORT int
+libevdev_set_index(struct libevdev* dev, int index,libevdev_ioctl func)
+{
+
+	int rc;
+	int i;
+	char buf[256];
+
+	if (dev->initialized) {
+		log_bug(dev, "device already initialized.\n");
+		return -EBADF;
+	}
+
+	if (index < 0) {
+		return -EBADF;
+	}
+
+	libevdev_reset(dev);
+	dev->fn = func;
+	dev->fd =index;
+	rc = func(index, EVIOCGBIT(0, sizeof(dev->bits)), dev->bits);
+	if (rc < 0)
+		goto out;
+
+	memset(buf, 0, sizeof(buf));
+	rc = func(index, EVIOCGNAME(sizeof(buf) - 1), buf);
+	if (rc < 0)
+		goto out;
+
+	free(dev->name);
+	dev->name = strdup(buf);
+	if (!dev->name) {
+		errno = ENOMEM;
+		goto out;
+	}
+
+	free(dev->phys);
+	dev->phys = NULL;
+	memset(buf, 0, sizeof(buf));
+	rc = func(index, EVIOCGPHYS(sizeof(buf) - 1), buf);
+	if (rc < 0) {
+		/* uinput has no phys */
+		if (errno != ENOENT)
+			goto out;
+	} else {
+		dev->phys = strdup(buf);
+		if (!dev->phys) {
+			errno = ENOMEM;
+			goto out;
+		}
+	}
+
+	free(dev->uniq);
+	dev->uniq = NULL;
+	memset(buf, 0, sizeof(buf));
+	rc = func(index, EVIOCGUNIQ(sizeof(buf) - 1), buf);
+	if (rc < 0) {
+		if (errno != ENOENT)
+			goto out;
+	} else	{
+		dev->uniq = strdup(buf);
+		if (!dev->uniq) {
+			errno = ENOMEM;
+			goto out;
+		}
+	}
+
+	rc = func(index, EVIOCGID, &dev->ids);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGVERSION, &dev->driver_version);
+	if (rc < 0)
+		goto out;
+
+	/* Built on a kernel with props, running against a kernel without property
+	   support. This should not be a fatal case, we'll be missing properties but other
+	   than that everything is as expected.
+	 */
+	rc = func(index, EVIOCGPROP(sizeof(dev->props)), dev->props);
+	if (rc < 0 && errno != EINVAL)
+		goto out;
+
+	rc = func(index, EVIOCGBIT(EV_REL, sizeof(dev->rel_bits)), dev->rel_bits);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGBIT(EV_ABS, sizeof(dev->abs_bits)), dev->abs_bits);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGBIT(EV_LED, sizeof(dev->led_bits)), dev->led_bits);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGBIT(EV_KEY, sizeof(dev->key_bits)), dev->key_bits);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGBIT(EV_SW, sizeof(dev->sw_bits)), dev->sw_bits);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGBIT(EV_MSC, sizeof(dev->msc_bits)), dev->msc_bits);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGBIT(EV_FF, sizeof(dev->ff_bits)), dev->ff_bits);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGBIT(EV_SND, sizeof(dev->snd_bits)), dev->snd_bits);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGKEY(sizeof(dev->key_values)), dev->key_values);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGLED(sizeof(dev->led_values)), dev->led_values);
+	if (rc < 0)
+		goto out;
+
+	rc = func(index, EVIOCGSW(sizeof(dev->sw_values)), dev->sw_values);
+	if (rc < 0)
+		goto out;
+
+	/* rep is a special case, always set it to 1 for both values if EV_REP is set */
+	if (bit_is_set(dev->bits, EV_REP)) {
+		for (i = 0; i < REP_CNT; i++)
+			set_bit(dev->rep_bits, i);
+		func(index, EVIOCGREP, dev->rep_values);
+		if (rc < 0)
+			goto out;
+	}
+
+	for (i = ABS_X; i <= ABS_MAX; i++) {
+		if (bit_is_set(dev->abs_bits, i)) {
+			struct input_absinfo abs_info;
+			rc = func(index, EVIOCGABS(i), &abs_info);
+			if (rc < 0)
+				goto out;
+
+			fix_invalid_absinfo(dev, i, &abs_info);
+
+			dev->abs_info[i] = abs_info;
+		}
+	}
+
+	dev->fd = index;
+
+	rc = init_slots(dev);
+	if (rc != 0)
+		goto out;
+
+	if (dev->num_slots != -1) {
+		struct slot_change_state unused[dev->num_slots];
+		sync_mt_state(dev, unused);
+	}
+
+	rc = init_event_queue(dev);
+	if (rc < 0) {
+		dev->fd = -1;
+		return -rc;
+	}
+
+	/* not copying key state because we won't know when we'll start to
+	 * use this fd and key's are likely to change state by then.
+	 * Same with the valuators, really, but they may not change.
+	 */
+
+	dev->initialized = true;
+out:
+	if (rc)
+		libevdev_reset(dev);
+	return rc ? -errno : 0;
+
+
+
+}
+
+
+int
+libevdev_new_from_index(int index, struct libevdev **dev,libevdev_ioctl func)
+{
+	struct libevdev *d;
+	int rc;
+
+	d = libevdev_new();
+	if (!d)
+		return -ENOMEM;
+
+	rc = libevdev_set_index(d, index,func);
+
+
+	if (rc < 0)
+		libevdev_free(d);
+	else
+		*dev = d;
+	return rc;
+}
diff -Naur old/libevdev/libevdev.h new/libevdev/libevdev.h
--- old/libevdev/libevdev.h	2021-01-01 00:00:00.000000000 +0800
+++ new/libevdev/libevdev.h	2021-01-01 00:00:00.000000000 +0800
@@ -2359,6 +2359,10 @@
  */
 int libevdev_get_repeat(const struct libevdev *dev, int *delay, int *period);

+/* for hdf drv interface */
+typedef int (*libevdev_ioctl)(int hdiindex,int cmd, void * iobuff);
+int libevdev_new_from_index(int index, struct libevdev **dev,libevdev_ioctl func);
+
 /********* DEPRECATED SECTION *********/
 #if defined(__GNUC__) && __GNUC__ >= 4
 #define LIBEVDEV_DEPRECATED __attribute__ ((deprecated))
