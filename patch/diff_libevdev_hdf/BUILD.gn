import("//build/ohos.gni")

# -p NUM  --strip=NUM  Strip NUM leading components from file names.
# -i PATCHFILE  --input=PATCHFILE  Read patch from PATCHFILE instead of stdin.
# -d DIR  --directory=DIR  Change the working directory to DIR first.

gen_src_dir = "//third_party/libevdev"
gen_dst_dir = root_out_dir + "/diff_libevdev_hdf"
patches_root_dir = "//foundation/multimodalinput/input/patch"
build_gn_dir = "$patches_root_dir/diff_libevdev_hdf"

action("apply_patch") {
  visibility = [ ":*" ]
  script = "$patches_root_dir/apply_patch.sh"
  inputs = [ "$gen_src_dir" ]
  outputs = [
    # patch_gen_libevdev
    "$gen_dst_dir/export_include",
    "$gen_dst_dir/libevdev",
    "$gen_dst_dir/include",
    "$gen_dst_dir/libevdev/libevdev-uinput.c",
    "$gen_dst_dir/libevdev/libevdev.c",
    "$gen_dst_dir/libevdev/libevdev-names.c",
  ]
  args = [
    rebase_path(gen_src_dir, root_build_dir),
    rebase_path(gen_dst_dir, root_build_dir),
    rebase_path(build_gn_dir, root_build_dir),
  ]
}

## Build libevdev-hdf.so {{{
config("libevdev_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "$gen_dst_dir/libevdev",
    "$gen_dst_dir/include",
  ]

  cflags = [
    "-Wno-unused-parameter",
    "-Wno-missing-braces",
  ]
}

config("libevdev_public_config") {
  include_dirs = [
    "$gen_dst_dir/export_include",
  ]

  cflags = [
  ]
}

ohos_source_set("patch_gen_libevdev") {
  sources = [
    "$gen_dst_dir/libevdev/libevdev-uinput.c",
    "$gen_dst_dir/libevdev/libevdev.c",
    "$gen_dst_dir/libevdev/libevdev-names.c",
  ]
  
  configs = [
    ":libevdev_config",
  ]

  public_configs = [
    ":libevdev_public_config",
  ]
  
  deps = [
    ":apply_patch"
  ]
  
  public_deps = [
  ]
}

ohos_shared_library("libevdev-hdf") {
  sources = [
  ]

  configs = [
    ":libevdev_config",
  ]

  public_configs = [
    ":libevdev_public_config",
  ]

  deps = [
    ":patch_gen_libevdev",
  ]

  public_deps = [
  ]

  part_name = "multimodalinput_base"
}
## Build libevdev-hdf.so }}}
